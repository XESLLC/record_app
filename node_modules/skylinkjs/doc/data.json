{
    "project": {
        "name": "skylinkjs",
        "description": "SkylinkJS is an open-source client-side library for your web-browser that enables any website to easily leverage the capabilities of WebRTC and its direct data streaming powers between peers for audio/video conferencing or file transfer.",
        "version": "0.6.0",
        "url": "https://temasys.github.io/"
    },
    "files": {
        "source/template/header.js": {
            "name": "source/template/header.js",
            "modules": {},
            "classes": {
                "Skylink": 1
            },
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-channel.js": {
            "name": "source/data-channel.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-process.js": {
            "name": "source/data-process.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-transfer.js": {
            "name": "source/data-transfer.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/ice-candidate.js": {
            "name": "source/ice-candidate.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/ice-connection.js": {
            "name": "source/ice-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-connection.js": {
            "name": "source/peer-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-data.js": {
            "name": "source/peer-data.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-handshake.js": {
            "name": "source/peer-handshake.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/room-connection.js": {
            "name": "source/room-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/room-init.js": {
            "name": "source/room-init.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/skylink-debug.js": {
            "name": "source/skylink-debug.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/skylink-events.js": {
            "name": "source/skylink-events.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/socket-channel.js": {
            "name": "source/socket-channel.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/socket-message.js": {
            "name": "source/socket-message.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/stream-media.js": {
            "name": "source/stream-media.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/stream-sdp.js": {
            "name": "source/stream-sdp.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Skylink": {
            "name": "Skylink",
            "shortname": "Skylink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/template/header.js",
            "line": 8,
            "description": "Please refer to the {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}\nmethod for a guide to initializing Skylink.<br>\nPlease Note:\n- You must subscribe Skylink events before calling\n  {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}.\n- You will need an API key to use Skylink, if you do not have one you can\n  [register for a developer account](http://\n  developer.temasys.com.sg) in the Skylink Developer Console.",
            "is_constructor": 1,
            "example": [
                "\n  // Getting started on how to use Skylink\n  var SkylinkDemo = new Skylink();\n  SkylinkDemo.init('apiKey', function () {\n    SkylinkDemo.joinRoom('my_room', {\n      userData: 'My Username',\n      audio: true,\n      video: true\n    });\n  });\n\n  SkylinkDemo.on('incomingStream', function (peerId, stream, peerInfo, isSelf) {\n    if (isSelf) {\n      attachMediaStream(document.getElementById('selfVideo'), stream);\n    } else {\n      var peerVideo = document.createElement('video');\n      peerVideo.id = peerId;\n      peerVideo.autoplay = 'autoplay';\n      document.getElementById('peersVideo').appendChild(peerVideo);\n      attachMediaStream(peerVideo, stream);\n    }\n  });\n\n  SkylinkDemo.on('peerLeft', function (peerId, peerInfo, isSelf) {\n    if (isSelf) {\n      document.getElementById('selfVideo').src = '';\n    } else {\n      var peerVideo = document.getElementById(peerId);\n      document.getElementById('peersVideo').removeChild(peerVideo);\n    }\n  });"
            ],
            "since": "0.5.0"
        }
    },
    "classitems": [
        {
            "file": "source/template/header.js",
            "line": 58,
            "description": "Version of Skylink",
            "itemtype": "attribute",
            "name": "VERSION",
            "type": "String",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 68,
            "description": "Helper function to generate unique IDs for your application.",
            "itemtype": "method",
            "name": "generateUUID",
            "return": {
                "description": "The unique Id.",
                "type": "String"
            },
            "since": "0.5.9",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 1,
            "description": "The list of DataChannel states that would be trigged.",
            "itemtype": "attribute",
            "name": "DATA_CHANNEL_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "CONNECTING",
                    "description": "The DataChannel is attempting to establish a connection.",
                    "type": "String"
                },
                {
                    "name": "OPEN",
                    "description": "The DataChannel connection is established.",
                    "type": "String"
                },
                {
                    "name": "CLOSING",
                    "description": "The DataChannel is closing the connection.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The DataChannel connection is closed.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "The DataChannel is thrown with an exception during connection.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataChannel",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 23,
            "description": "The flag that indicates if DataChannel should be enabled.",
            "itemtype": "attribute",
            "name": "_enableDataChannel",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataChannel",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 36,
            "description": "Stores the DataChannel received or created with peers.",
            "itemtype": "attribute",
            "name": "_dataChannels",
            "params": [
                {
                    "name": "<peerId>",
                    "description": "The DataChannel associated with peer.",
                    "type": "Object"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataChannel",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 49,
            "description": "Creates and binds events to a SCTP DataChannel.",
            "itemtype": "method",
            "name": "_createDataChannel",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId to tie the DataChannel to.",
                    "type": "String"
                },
                {
                    "name": "dataChannel",
                    "description": "The datachannel object received.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "trigger": "dataChannelState",
            "return": {
                "description": "New DataChannel with events.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "component": "DataChannel",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 136,
            "description": "Checks and triggers provided callback when the current DataChannel readyState\nis the same as the readyState provided.",
            "itemtype": "method",
            "name": "_checkDataChannelReadyState",
            "params": [
                {
                    "name": "dataChannel",
                    "description": "The DataChannel readyState to check on.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be fired when DataChannel readyState\n  matches the readyState provided.",
                    "type": "Function"
                },
                {
                    "name": "readyState",
                    "description": "The DataChannel readystate to match. [Rel: DATA_CHANNEL_STATE]",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataChannel",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 180,
            "description": "Sends a Message via the peer's DataChannel based on the peerId provided.",
            "itemtype": "method",
            "name": "_sendDataChannelMessage",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId associated with the DataChannel to send from.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The Message data to send.",
                    "type": "JSON"
                }
            ],
            "trigger": "dataChannelState",
            "access": "private",
            "tagname": "",
            "component": "DataChannel",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 212,
            "description": "Closes the peer's DataChannel based on the peerId provided.",
            "itemtype": "method",
            "name": "_closeDataChannel",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId associated with the DataChannel to be closed.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataChannel",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 1,
            "description": "The size of a chunk that DataTransfer should chunk a Blob into.",
            "itemtype": "attribute",
            "name": "_CHUNK_FILE_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "component": "DataProcess",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 14,
            "description": "The size of a chunk that DataTransfer should chunk a Blob into specifically for Firefox\nbased browsers.\n- Tested: Sends <code>49152</code> kb | Receives <code>16384</code> kb.",
            "itemtype": "attribute",
            "name": "_MOZ_CHUNK_FILE_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "component": "DataProcess",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 29,
            "description": "The list of DataTransfer native data types that would be transfered with.\n- Not Implemented: <code>ARRAY_BUFFER</code>, <code>BLOB</code>.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_DATA_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "BINARY_STRING",
                    "description": "BinaryString data type.",
                    "type": "String"
                },
                {
                    "name": "ARRAY_BUFFER",
                    "description": "ArrayBuffer data type.",
                    "type": "String"
                },
                {
                    "name": "BLOB",
                    "description": "Blob data type.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataProcess",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 48,
            "description": "Converts a Base64 encoded string to a Blob.\n- Not Implemented: Handling of URLEncoded DataURIs.",
            "author": "devnull69@stackoverflow.com #6850276",
            "itemtype": "method",
            "name": "_base64ToBlob",
            "params": [
                {
                    "name": "dataURL",
                    "description": "Blob base64 dataurl.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataProcess",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 71,
            "description": "Chunks a Blob into Blob chunks based on a fixed size.",
            "itemtype": "method",
            "name": "_chunkBlobData",
            "params": [
                {
                    "name": "blob",
                    "description": "The Blob data to chunk.",
                    "type": "Blob"
                },
                {
                    "name": "blobByteSize",
                    "description": "The original Blob data size.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataProcess",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1,
            "description": "Current version of data transfer protocol",
            "itemtype": "attribute",
            "name": "DT_PROTOCOL_VERSION",
            "type": "String",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 12,
            "description": "The DataTransfer protocol list. The <code>data</code> object is an\nindicator of the expected parameters to be given and received.",
            "itemtype": "attribute",
            "name": "_DC_PROTOCOL_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "WRQ",
                    "description": "Send to initiate a DataTransfer request.",
                    "type": "String"
                },
                {
                    "name": "ACK",
                    "description": "Send to acknowledge the DataTransfer request.",
                    "type": "String"
                },
                {
                    "name": "DATA",
                    "description": "Send as the raw Blob chunk data based on the <code>ackN</code>\n  received.\n- Handle the logic based on parsing the data received as JSON. If it should fail,\n  the expected data received should be a <code>DATA</code> request.",
                    "type": "String"
                },
                {
                    "name": "CANCEL",
                    "description": "Send to cancel or terminate a DataTransfer.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "Sent when a timeout waiting for a DataTransfer response\n  has reached its limit.",
                    "type": "String"
                },
                {
                    "name": "MESSAGE",
                    "description": "Sends a Message object.",
                    "type": "String"
                }
            ],
            "final": 1,
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 41,
            "description": "The list of DataTransfer streamming types to indicate an upload stream\nor download stream.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "UPLOAD",
                    "description": "An upload stream.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD",
                    "description": "A download stream.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataTransfer",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 58,
            "description": "The list of DataTransfer states that would be triggered.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "UPLOAD_REQUEST",
                    "description": "A DataTransfer request to start a transfer is received.",
                    "type": "String"
                },
                {
                    "name": "UPLOAD_STARTED",
                    "description": "The request has been accepted and upload is starting.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD_STARTED",
                    "description": "The request has been accepted and download is starting.",
                    "type": "String"
                },
                {
                    "name": "UPLOADING",
                    "description": "An ongoing upload DataTransfer is occuring.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOADING",
                    "description": "An ongoing download DataTransfer is occuring.",
                    "type": "String"
                },
                {
                    "name": "UPLOAD_COMPLETED",
                    "description": "The upload is completed.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD_COMPLETED",
                    "description": "The download is completed.",
                    "type": "String"
                },
                {
                    "name": "REJECTED",
                    "description": "A DataTransfer request is rejected by a peer.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "DataTransfer has waiting longer than timeout is specified.\n  DataTransfer is aborted.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataTransfer",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 90,
            "description": "Stores the list of DataTransfer uploading chunks.",
            "itemtype": "attribute",
            "name": "_uploadDataTransfers",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 102,
            "description": "Stores the list of DataTransfer uploading sessions.",
            "itemtype": "attribute",
            "name": "_uploadDataSessions",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 114,
            "description": "Stores the list of DataTransfer downloading chunks.",
            "itemtype": "attribute",
            "name": "_downloadDataTransfers",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 126,
            "description": "Stores the list of DataTransfer downloading sessions.",
            "itemtype": "attribute",
            "name": "_downloadDataSessions",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 138,
            "description": "Stores all the <code>setTimeout</code> objects for each\nrequest received.",
            "itemtype": "attribute",
            "name": "_dataTransfersTimeout",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 151,
            "description": "Sets a waiting timeout for the request received from the peer. Once\ntimeout has expired, an error would be thrown.",
            "itemtype": "method",
            "name": "_setDataChannelTimeout",
            "params": [
                {
                    "name": "peerId",
                    "description": "The responding peerId of the peer to await for\n  response during the DataTransfer.",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "The timeout to set in seconds.",
                    "type": "Number"
                },
                {
                    "name": "isSender",
                    "description": "The flag to indicate if the response\n   received is from the sender or the receiver.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 201,
            "description": "Clears the timeout set for the DataTransfer.",
            "itemtype": "method",
            "name": "_clearDataChannelTimeout",
            "params": [
                {
                    "name": "peerId",
                    "description": "The responding peerId of the peer to await for\n   response during the DataTransfer.",
                    "type": "String"
                },
                {
                    "name": "isSender",
                    "description": "The flag to indicate if the response\n   received is from the sender or the receiver.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 222,
            "description": "Initiates a DataTransfer with the peer.",
            "itemtype": "method",
            "name": "_sendBlobDataToPeer",
            "params": [
                {
                    "name": "data",
                    "description": "The Blob data to send.",
                    "type": "Blob",
                    "props": [
                        {
                            "name": "target",
                            "description": "The real peerId to send data to, in the case where MCU is enabled.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "dataInfo",
                    "description": "The Blob data information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "transferId",
                            "description": "The transferId of the DataTransfer.",
                            "type": "String"
                        },
                        {
                            "name": "name",
                            "description": "The Blob data name.",
                            "type": "String"
                        },
                        {
                            "name": "timeout",
                            "description": "The timeout set to await for response from peer.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "60"
                        },
                        {
                            "name": "size",
                            "description": "The Blob data size.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "targetPeerId",
                    "description": "The peerId of the peer to start the DataTransfer.\n   To start the DataTransfer to all peers, set as <code>false</code>.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isPrivate",
                    "description": "The flag to indicate if the DataTransfer is broadcasted to other\n   peers or sent to the peer privately.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 305,
            "description": "Handles the DataTransfer protocol stage and invokes the related handler function.",
            "itemtype": "method",
            "name": "_dataChannelProtocolHandler",
            "params": [
                {
                    "name": "data",
                    "description": "The DataTransfer data received from the DataChannel.",
                    "type": "String|Object"
                },
                {
                    "name": "senderPeerId",
                    "description": "The peerId of the sender.",
                    "type": "String"
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel name related to the DataTransfer.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 351,
            "description": "Handles the WRQ request.",
            "itemtype": "method",
            "name": "_WRQProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The peerId of the sender.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The WRQ data object.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "agent",
                            "description": "The peer's browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The peer's browser version.",
                            "type": "Number"
                        },
                        {
                            "name": "name",
                            "description": "The Blob name.",
                            "type": "String"
                        },
                        {
                            "name": "size",
                            "description": "The Blob size.",
                            "type": "Number"
                        },
                        {
                            "name": "chunkSize",
                            "description": "The Blob chunk size expected to receive.",
                            "type": "Number"
                        },
                        {
                            "name": "timeout",
                            "description": "The timeout to wait for the packet response.",
                            "type": "Number"
                        },
                        {
                            "name": "isPrivate",
                            "description": "The flag to indicate if the data is\n  sent as a private request.",
                            "type": "Boolean"
                        },
                        {
                            "name": "sender",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"WRQ\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel name related to the DataTransfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 399,
            "description": "Handles the ACK request.",
            "itemtype": "method",
            "name": "_ACKProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The peerId of the sender.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The ACK data object.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "ackN",
                            "description": "The current index of the Blob chunk array to\n  receive from.\n<ul>\n<li><code>0</code> The request is accepted and sender sends the first packet.</li>\n<li><code>>0</code> The current packet number from Blob array being sent.</li>\n<li><code>-1</code> The request is rejected and sender cancels the transfer.</li>\n</ul>",
                            "type": "String"
                        },
                        {
                            "name": "sender",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"ACK\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel name related to the DataTransfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 469,
            "description": "Handles the MESSAGE request.",
            "itemtype": "method",
            "name": "_MESSAGEProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The peerId of the sender.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The ACK data object.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "target",
                            "description": "The peerId of the peer to send the Message to.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "The Message object to send.",
                            "type": "String|JSON"
                        },
                        {
                            "name": "sender",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"MESSAGE\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel name related to the DataTransfer.",
                    "type": "String"
                }
            ],
            "trigger": "incomingMessage",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 498,
            "description": "Handles the ERROR request.",
            "itemtype": "method",
            "name": "_ERRORProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The peerId of the sender.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The ERROR data object.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The Blob data name.",
                            "type": "String"
                        },
                        {
                            "name": "content",
                            "description": "The error message.",
                            "type": "String"
                        },
                        {
                            "name": "isUploadError",
                            "description": "The flag to indicate if the\n  exception is thrown from the sender or receiving peer.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "sender",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"ERROR\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel name related to the DataTransfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 531,
            "description": "Handles the CANCEL request.",
            "itemtype": "method",
            "name": "_CANCELProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The peerId of the sender.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The CANCEL data object.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The Blob data name.",
                            "type": "String"
                        },
                        {
                            "name": "content",
                            "description": "The reason for termination.",
                            "type": "String"
                        },
                        {
                            "name": "sender",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"CANCEL\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel name related to the DataTransfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 592,
            "description": "Handles the DATA request.",
            "itemtype": "method",
            "name": "_DATAProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The peerId of the sender.",
                    "type": "String"
                },
                {
                    "name": "dataString",
                    "description": "The data received.\n  [Rel: Skylink._DC_PROTOCOL_TYPE.DATA.data]",
                    "type": "ArrayBuffer|Blob|String"
                },
                {
                    "name": "dataType",
                    "description": "The data type received from datachannel.\n  [Rel: Skylink.DATA_TRANSFER_DATA_TYPE]",
                    "type": "String"
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel name related to the DataTransfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 691,
            "description": "Starts a DataTransfer request to the peers based on the peerIds provided.\nPeers have the option to accept or reject the receiving data.\nDataTransfers are encrypted.",
            "itemtype": "method",
            "name": "sendBlobData",
            "params": [
                {
                    "name": "data",
                    "description": "The Blob data to be sent over.",
                    "type": "Object"
                },
                {
                    "name": "dataInfo",
                    "description": "Information required about the data transferred",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The request name (name of the file for example).",
                            "type": "String"
                        },
                        {
                            "name": "timeout",
                            "description": "The time (in seconds) before the transfer\nrequest is cancelled if not answered.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "60"
                        },
                        {
                            "name": "size",
                            "description": "The Blob data size (in bytes).",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "targetPeerId",
                    "description": "The peerId of the peer targeted to receive data.\n  To send to all peers, leave this option blank.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback fired after data was uploaded.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error received in the callback.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "success",
                            "description": "The result received in the callback.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  // Example 1: Send file to all peers connected\n  SkylinkDemo.sendBlobData(file, 67);\n\n  // Example 2: Send file to individual peer\n  SkylinkDemo.sendBlobData(blob, 87, targetPeerId);\n\n  // Example 3: Send file with callback\n  SkylinkDemo.sendBlobData(data,{\n     name: data.name,\n     size: data.size\n   },function(error, success){\n    if (error){\n      console.log('Error happened. Can not send file'));\n    }\n    else{\n      console.log('Successfully uploaded file');\n    }\n  });"
            ],
            "trigger": "dataTransferState",
            "since": "0.5.5",
            "component": "DataTransfer",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 877,
            "description": "Responds to a DataTransfer request initiated by a peer.",
            "itemtype": "method",
            "name": "respondBlobRequest",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to respond the request to.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "accept",
                    "description": "The flag to accept or reject the request.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "dataTransferState",
            "component": "DataTransfer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 915,
            "description": "Cancels or terminates an ongoing DataTransfer request.",
            "itemtype": "method",
            "name": "cancelBlobTransfer",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer associated with the DataTransfer to cancel.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "transferType",
                    "description": "The transfer type of the request. Is it an ongoing uploading\n   stream to reject or an downloading stream.\n   If not transfer type is provided, it cancels all DataTransfer associated with the peer.\n   [Rel: Skylink.DATA_TRANSFER_TYPE]",
                    "type": "String",
                    "optional": true
                }
            ],
            "trigger": "dataTransferState.",
            "since": "0.5.7",
            "component": "DataTransfer",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 986,
            "description": "Send a Message object via the DataChannel established with peers.\n- Maximum size: <code>16Kb</code>",
            "itemtype": "method",
            "name": "sendP2PMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object to send.",
                    "type": "String|JSON"
                },
                {
                    "name": "targetPeerId",
                    "description": "The peerId of the targeted peer to\n  send the Message object only. To send to all peers, leave this\n  option blank.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send to all peers\n  SkylinkDemo.sendP2PMessage('Hi there! This is from a DataChannel!');\n\n  // Example 2: Send to specific peer\n  SkylinkDemo.sendP2PMessage('Hi there peer! This is from a DataChannel!', targetPeerId);"
            ],
            "trigger": "incomingMessage",
            "since": "0.5.5",
            "component": "DataTransfer",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 1,
            "description": "Stores the list of queued ICE Candidates received before handshaking is completed.",
            "itemtype": "attribute",
            "name": "_peerCandidatesQueue",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.1",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 13,
            "description": "Stores the list of ICE Candidates to disable ICE trickle\nto ensure stability of ICE connection.",
            "itemtype": "attribute",
            "name": "_peerIceTrickleDisabled",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.8",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 26,
            "description": "The list of ICE candidate generation states that would be triggered.",
            "itemtype": "attribute",
            "name": "CANDIDATE_GENERATION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "NEW",
                    "description": "The object was just created, and no networking\n  has occurred yet.",
                    "type": "String"
                },
                {
                    "name": "GATHERING",
                    "description": "The ICE engine is in the process of gathering\n  candidates for connection.",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "The ICE engine has completed gathering. Events\n  such as adding a new interface or a new TURN server will cause the\n  state to go back to gathering.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.4.1",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 48,
            "description": "An ICE candidate has just been generated (ICE gathering) and will be sent to the peer.\nPart of connection establishment.",
            "itemtype": "method",
            "name": "_onIceCandidate",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The peerId of the target peer.",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "This is provided directly by the peerconnection API.",
                    "type": "Event"
                }
            ],
            "trigger": "candidateGenerationState",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 97,
            "description": "Stores an ICE Candidate received before handshaking",
            "itemtype": "method",
            "name": "_addIceCandidateToQueue",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The peerId of the target peer.",
                    "type": "String"
                },
                {
                    "name": "candidate",
                    "description": "The ICE Candidate object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 115,
            "description": "Handles the event when adding ICE Candidate passes.",
            "itemtype": "method",
            "name": "_onAddIceCandidateSuccess",
            "access": "private",
            "tagname": "",
            "since": "0.5.9",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 128,
            "description": "Handles the event when adding ICE Candidate fails.",
            "itemtype": "method",
            "name": "_onAddIceCandidateFailure",
            "access": "private",
            "tagname": "",
            "since": "0.5.9",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 141,
            "description": "Adds all stored ICE Candidates received before handshaking.",
            "itemtype": "method",
            "name": "_addIceCandidateFromQueue",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The peerId of the target peer.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 1,
            "description": "The list of ICE Connection states that would be triggered.",
            "itemtype": "attribute",
            "name": "ICE_CONNECTION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "STARTING",
                    "description": "The ICE agent is gathering addresses\n  and/or waiting for remote candidates to be supplied.",
                    "type": "String"
                },
                {
                    "name": "CHECKING",
                    "description": "The ICE agent has received remote candidates\n  on at least one component, and is checking candidate pairs but has\n  not yet found a connection. In addition to checking, it may also\n  still be gathering.",
                    "type": "String"
                },
                {
                    "name": "CONNECTED",
                    "description": "The ICE agent has found a usable connection\n  for all components but is still checking other candidate pairs to see\n  if there is a better connection. It may also still be gathering.",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "The ICE agent has finished gathering and\n  checking and found a connection for all components.",
                    "type": "String"
                },
                {
                    "name": "FAILED",
                    "description": "The ICE agent is finished checking all\n  candidate pairs and failed to find a connection for at least one\n  component.",
                    "type": "String"
                },
                {
                    "name": "DISCONNECTED",
                    "description": "Liveness checks have failed for one or\n  more components. This is more aggressive than \"failed\", and may\n  trigger intermittently (and resolve itself without action) on\n  a flaky network.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The ICE agent has shut down and is no\n  longer responding to STUN requests.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.1.0",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 41,
            "description": "The list of TURN server transports.",
            "itemtype": "attribute",
            "name": "TURN_TRANSPORT",
            "type": "JSON",
            "params": [
                {
                    "name": "TCP",
                    "description": "Use only TCP transport option.",
                    "type": "String"
                },
                {
                    "name": "UDP",
                    "description": "Use only UDP transport option.",
                    "type": "String"
                },
                {
                    "name": "ANY",
                    "description": "Use both TCP and UDP transport option.",
                    "type": "String"
                },
                {
                    "name": "NONE",
                    "description": "Set no transport option in TURN servers",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.4",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 61,
            "description": "The flag that indicates if ICE trickle is enabled.",
            "itemtype": "attribute",
            "name": "_enableIceTrickle",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.3.0",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 74,
            "description": "The flag that indicates if STUN server is to be used.",
            "itemtype": "attribute",
            "name": "_enableSTUN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "ICE",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 86,
            "description": "The flag that indicates if TURN server is to be used.",
            "itemtype": "attribute",
            "name": "_enableTURN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "ICE",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 98,
            "description": "The flag that indicates if SSL is used in STUN server connection.",
            "itemtype": "attribute",
            "name": "_STUNSSL",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "development": "true",
            "unsupported": "true",
            "since": "0.5.4",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 113,
            "description": "The flag that indicates if SSL is used in TURN server connection.",
            "itemtype": "attribute",
            "name": "_TURNSSL",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "development": "true",
            "unsupported": "true",
            "since": "0.5.4",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 128,
            "description": "The option of transport protocol for TURN servers.",
            "itemtype": "attribute",
            "name": "_TURNTransport",
            "type": "String",
            "default": "Skylink.TURN_TRANSPORT.ANY",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 141,
            "description": "Stores the list of ICE connection failures.",
            "itemtype": "attribute",
            "name": "_ICEConnectionFailures",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Peer",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 153,
            "description": "Sets the STUN server specifically for Firefox ICE Connection.",
            "itemtype": "method",
            "name": "_setFirefoxIceServers",
            "params": [
                {
                    "name": "config",
                    "description": "Ice configuration servers url object.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "Updated configuration",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 194,
            "description": "Sets the STUN server specially for Firefox for ICE Connection.",
            "itemtype": "method",
            "name": "_setIceServers",
            "params": [
                {
                    "name": "config",
                    "description": "Ice configuration servers url object.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "Updated configuration",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 1,
            "description": "The list of Peer connection states that would be triggered.",
            "itemtype": "attribute",
            "name": "PEER_CONNECTION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "STABLE",
                    "description": "There is no handshaking in progress. This state occurs\n  when handshaking has just started or close.",
                    "type": "String"
                },
                {
                    "name": "HAVE_LOCAL_OFFER",
                    "description": "The session description \"offer\" is generated\n  and to be sent.",
                    "type": "String"
                },
                {
                    "name": "HAVE_REMOTE_OFFER",
                    "description": "The session description \"offer\" is received.\n  The handshaking has been completed.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The connection is closed.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Peer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 24,
            "description": "Timestamp of the moment when last restart happened.",
            "itemtype": "attribute",
            "name": "_lastRestart",
            "type": "Object",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.9",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 36,
            "description": "Counter of the number of consecutive retries.",
            "itemtype": "attribute",
            "name": "_retryCount",
            "type": "Integer",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 48,
            "description": "Internal array of Peer connections.",
            "itemtype": "attribute",
            "name": "_peerConnections",
            "type": "Object",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 60,
            "description": "Stores the list of restart weights received that would be compared against\nto indicate if User should initiates a restart or Peer should.\nIn general, the one that sends restart later is the one who initiates the restart.",
            "itemtype": "attribute",
            "name": "_peerRestartPriorities",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 73,
            "description": "Initiates a Peer connection with either a response to an answer or starts\na connection with an offer.",
            "itemtype": "method",
            "name": "_addPeer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer we should connect to.",
                    "type": "String"
                },
                {
                    "name": "peerBrowser",
                    "description": "The peer browser information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "agent",
                            "description": "The peer browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The peer browser version.",
                            "type": "Number"
                        },
                        {
                            "name": "os",
                            "description": "The peer operating system.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "toOffer",
                    "description": "Whether we should start the O/A or wait.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "restartConn",
                    "description": "Whether connection is restarted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "receiveOnly",
                    "description": "Should they only receive?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "isSS",
                    "description": "Should the incoming stream labelled as screensharing mode?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 126,
            "description": "Restarts a Peer connection.",
            "itemtype": "method",
            "name": "_restartPeerConnection",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer to restart connection with.",
                    "type": "String"
                },
                {
                    "name": "isSelfInitiatedRestart",
                    "description": "Indicates whether the restarting action\n  was caused by self.",
                    "type": "Boolean"
                },
                {
                    "name": "isConnectionRestart",
                    "description": "The flag that indicates whether the restarting action\n  is caused by connectivity issues.",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The callback once restart peer connection is completed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 250,
            "description": "Removes and closes a Peer connection.",
            "itemtype": "method",
            "name": "_removePeer",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer to close connection.",
                    "type": "String"
                }
            ],
            "trigger": "peerLeft",
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 307,
            "description": "Creates a Peer connection to communicate with the peer whose ID is 'targetMid'.\nAll the peerconnection callbacks are set up here. This is a quite central piece.",
            "itemtype": "method",
            "name": "_createPeerConnection",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The target peer Id.",
                    "type": "String"
                },
                {
                    "name": "isScreenSharing",
                    "description": "The flag that indicates if incoming\n  stream is screensharing mode.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The created peer connection object.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 400,
            "description": "// resend if failed\nif (iceConnectionState === self.ICE_CONNECTION_STATE.FAILED) {\n  log.debug([targetMid, 'RTCIceConnectionState', null,\n    'Ice connection state failed. Re-negotiating connection']);\n  self._removePeer(targetMid);\n  self._sendChannelMessage({\n    type: self._SIG_MESSAGE_TYPE.WELCOME,\n    mid: self._user.sid,\n    rid: self._room.id,\n    agent: window.webrtcDetectedBrowser,\n    version: window.webrtcDetectedVersion,\n    userInfo: self.getPeerInfo(),\n    target: targetMid,\n    restartNego: true,\n    hsPriority: -1\n  });",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 448,
            "description": "Refreshes a Peer connection with a connected peer.\nIf there are more than 1 refresh during 5 seconds\n  or refresh is less than 3 seconds since the last refresh\n  initiated by the other peer, it will be aborted.",
            "itemtype": "method",
            "name": "refreshConnection",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to refresh the connection.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n  SkylinkDemo.on('iceConnectionState', function (state, peerId)) {\n    if (iceConnectionState === SkylinkDemo.ICE_CONNECTION_STATE.FAILED) {\n      // Do a refresh\n      SkylinkDemo.refreshConnection(peerId);\n    }\n  });"
            ],
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 1,
            "description": "Stores the User information.",
            "itemtype": "attribute",
            "name": "_peerInformations",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Peer",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 13,
            "description": "Stores the User information, credential and the local stream(s).",
            "itemtype": "attribute",
            "name": "_user",
            "type": "JSON",
            "params": [
                {
                    "name": "uid",
                    "description": "The user's session id.",
                    "type": "String"
                },
                {
                    "name": "sid",
                    "description": "The user's secret id. This is the id used as the peerId.",
                    "type": "String"
                },
                {
                    "name": "timestamp",
                    "description": "The user's timestamp.",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "The user's access token.",
                    "type": "String"
                }
            ],
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "User",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 29,
            "description": "User's custom data set.",
            "itemtype": "attribute",
            "name": "_userData",
            "type": "JSON|String",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "User",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 41,
            "description": "Update/Set the User custom data. This Data can be a simple string or a JSON data.\nIt is let to user choice to decide how this information must be handled.\nThe Skylink demos provided use this parameter as a string for displaying user name.\n- Please note that the custom data would be totally overwritten.\n- If you want to modify only some data, please call\n  {{#crossLink \"Skylink/getUserData:method\"}}getUserData(){{/crossLink}}\n  and then modify the information you want individually.\n- {{#crossLink \"Skylink/peerUpdated:event\"}}peerUpdated{{/crossLink}}\n  event fires only if <b>setUserData()</b> is called after\n  joining a room.",
            "itemtype": "method",
            "name": "setUserData",
            "params": [
                {
                    "name": "userData",
                    "description": "User custom data.",
                    "type": "JSON|String"
                }
            ],
            "example": [
                "\n  // Example 1: Intial way of setting data before user joins the room\n  SkylinkDemo.setUserData({\n    displayName: 'Bobby Rays',\n    fbUserId: '1234'\n  });\n\n // Example 2: Way of setting data after user joins the room\n  var userData = SkylinkDemo.getUserData();\n  userData.displayName = 'New Name';\n  userData.fbUserId = '1234';\n  SkylinkDemo.setUserData(userData);"
            ],
            "trigger": "peerUpdated",
            "component": "User",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 90,
            "description": "Gets the User custom data.\nSee {{#crossLink \"Skylink/setUserData:method\"}}setUserData(){{/crossLink}}\n  for more information",
            "itemtype": "method",
            "name": "getUserData",
            "return": {
                "description": "User custom data.",
                "type": "JSON|String"
            },
            "example": [
                "\n  // Example 1: To get other peer's userData\n  var peerData = SkylinkDemo.getUserData(peerId);\n\n  // Example 2: To get own userData\n  var userData = SkylinkDemo.getUserData();"
            ],
            "component": "User",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 120,
            "description": "Gets the Peer information (media settings,media status and personnal data set by the peer).",
            "itemtype": "method",
            "name": "_parseUserData",
            "params": [
                {
                    "name": "userData",
                    "description": "User custom data.",
                    "type": "JSON",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "User",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 135,
            "description": "Gets the Peer information.\n- If there is no information related to the peer, <code>null</code> would be returned.",
            "itemtype": "method",
            "name": "getPeerInfo",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer retrieve we want to retrieve the information.\n   Leave this blank to return the User information.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Peer information. Please reference\n  {{#crossLink \"Skylink/peerJoined:event\"}}peerJoined{{/crossLink}}\n  <code>peerInfo</code> parameter.",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: To get other peer's information\n  var peerInfo = SkylinkDemo.getPeerInfo(peerId);\n\n  // Example 2: To get own information\n  var userInfo = SkylinkDemo.getPeerInfo();"
            ],
            "component": "Peer",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 1,
            "description": "The list of handshake progress steps that would be triggered.",
            "type": "JSON",
            "itemtype": "attribute",
            "name": "HANDSHAKE_PROGRESS",
            "params": [
                {
                    "name": "ENTER",
                    "description": "Step 1. Received \"enter\" from peer.",
                    "type": "String"
                },
                {
                    "name": "WELCOME",
                    "description": "Step 2. Received \"welcome\" from peer.",
                    "type": "String"
                },
                {
                    "name": "OFFER",
                    "description": "Step 3. Received \"offer\" from peer.",
                    "type": "String"
                },
                {
                    "name": "ANSWER",
                    "description": "Step 4. Received \"answer\" from peer.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "Error state.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Peer",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 23,
            "description": "Stores the list of <code>setTimeout</code> awaiting for successful connection.",
            "itemtype": "attribute",
            "name": "_peerConnectionHealthTimers",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 35,
            "description": "Stores the list of stable Peer connection.",
            "itemtype": "attribute",
            "name": "_peerConnectionHealth",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 46,
            "description": "Stores the list of handshaking weights received that would be compared against\nto indicate if User should send an \"offer\" or Peer should.",
            "itemtype": "attribute",
            "name": "_peerHSPriorities",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 58,
            "description": "Creates an offer to Peer to initate Peer connection.",
            "itemtype": "method",
            "name": "_doOffer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send offer to.",
                    "type": "String"
                },
                {
                    "name": "peerBrowser",
                    "description": "The peer browser information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "agent",
                            "description": "The peer browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The peer browser version.",
                            "type": "Number"
                        },
                        {
                            "name": "os",
                            "description": "The peer browser operating system.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 144,
            "description": "Creates an answer to Peer as a response to Peer's offer.",
            "itemtype": "method",
            "name": "_doAnswer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send answer to.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 174,
            "description": "Starts a Peer connection health check.\nThe health timers waits for connection, and within 1m if there is not connection,\nit attempts a reconnection.",
            "itemtype": "method",
            "name": "_startPeerConnectionHealthCheck",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to set a connection timeout if connection failed.",
                    "type": "String"
                },
                {
                    "name": "toOffer",
                    "description": "The flag to check if peer is offerer. If the peer is offerer,\n  the restart check should be increased.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 234,
            "description": "Stops a Peer connection health check.",
            "itemtype": "method",
            "name": "_stopPeerConnectionHealthCheck",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to clear the checking.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 259,
            "description": "Sets a generated session description and sends to Peer.",
            "itemtype": "method",
            "name": "_setLocalAndSendMessage",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send offer/answer to.",
                    "type": "String"
                },
                {
                    "name": "sessionDescription",
                    "description": "This should be provided by the peerconnection API.\n  User might 'tamper' with it, but then , the setLocal may fail.",
                    "type": "JSON"
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 1,
            "description": "The list of signaling warnings that would be received.",
            "itemtype": "attribute",
            "name": "SYSTEM_ACTION",
            "type": "JSON",
            "params": [
                {
                    "name": "WARNING",
                    "description": "Server warning to User if actions are not\n  taken, User would be kicked out of the Room.",
                    "type": "String"
                },
                {
                    "name": "REJECT",
                    "description": "Server has kicked User out of the Room.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 18,
            "description": "The list of signaling actions to be taken upon received.",
            "itemtype": "attribute",
            "name": "SYSTEM_ACTION_REASON",
            "type": "JSON",
            "params": [
                {
                    "name": "FAST_MESSAGE",
                    "description": "User is not alowed to\n  send too quick messages as it is used to prevent jam.",
                    "type": "String"
                },
                {
                    "name": "ROOM_LOCKED",
                    "description": "Room is locked and User is rejected from joining the Room.",
                    "type": "String"
                },
                {
                    "name": "ROOM_FULL",
                    "description": "The target Peers in a persistent room is full.",
                    "type": "String"
                },
                {
                    "name": "DUPLICATED_LOGIN",
                    "description": "The User is re-attempting to connect again with\n  an userId that has been used.",
                    "type": "String"
                },
                {
                    "name": "SERVER_ERROR",
                    "description": "Server has an error.",
                    "type": "String"
                },
                {
                    "name": "VERIFICATION",
                    "description": "Verification is incomplete for roomId provided.",
                    "type": "String"
                },
                {
                    "name": "EXPIRED",
                    "description": "Persistent meeting. Room has\n  expired and user is unable to join the room.",
                    "type": "String"
                },
                {
                    "name": "ROOM_CLOSED",
                    "description": "The persistent room is closed as it has been expired.",
                    "type": "String"
                },
                {
                    "name": "ROOM_CLOSING",
                    "description": "The persistent room is closing.",
                    "type": "String"
                },
                {
                    "name": "OVER_SEAT_LIMIT",
                    "description": "The seat limit has been reached.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 53,
            "description": "The room that the user is currently connected to.",
            "itemtype": "attribute",
            "name": "_selectedRoom",
            "type": "String",
            "default": "Skylink._defaultRoom",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 65,
            "description": "The flag that indicates whether room is currently locked.",
            "itemtype": "attribute",
            "name": "_roomLocked",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 76,
            "description": "Connects the User to a Room.",
            "itemtype": "method",
            "name": "joinRoom",
            "params": [
                {
                    "name": "room",
                    "description": "Room name to join.\n  If Room name is not provided, User would join the default room.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "init.options.defaultRoom"
                },
                {
                    "name": "options",
                    "description": "Media Constraints",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data. See\n{{#crossLink \"Skylink/setUserData:method\"}}setUserData(){{/crossLink}}\n  for more information",
                            "type": "JSON|String",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "Enable audio stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Enable video stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream frameRate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Stream bandwidth settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio stream bandwidth in kbps.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "video",
                                    "description": "Video stream bandwidth in kbps.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "256"
                                },
                                {
                                    "name": "data",
                                    "description": "Data stream bandwidth in kbps.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1638400"
                                }
                            ]
                        },
                        {
                            "name": "manualGetUserMedia",
                            "description": "Get the user media manually.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after peer leaves the room.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // To just join the default room without any video or audio\n  // Note that calling joinRoom without any parameters\n  // still sends any available existing MediaStreams allowed.\n  // See Examples 2, 3, 4 and 5 etc to prevent video or audio stream\n  SkylinkDemo.joinRoom();\n\n  // To just join the default room with bandwidth settings\n  SkylinkDemo.joinRoom({\n    'bandwidth': {\n      'data': 14440\n    }\n  });\n\n  // Example 1: To call getUserMedia and joinRoom seperately\n  SkylinkDemo.getUserMedia();\n  SkylinkDemo.on('mediaAccessSuccess', function (stream)) {\n    attachMediaStream($('.localVideo')[0], stream);\n    SkylinkDemo.joinRoom();\n  });\n\n  // Example 2: Join a room without any video or audio\n  SkylinkDemo.joinRoom('room');\n\n  // Example 3: Join a room with audio only\n  SkylinkDemo.joinRoom('room', {\n    'audio' : true,\n    'video' : false\n  });\n\n  // Example 4: Join a room with prefixed video width and height settings\n  SkylinkDemo.joinRoom('room', {\n    'audio' : true,\n    'video' : {\n      'resolution' : {\n        'width' : 640,\n        'height' : 320\n      }\n    }\n  });\n\n  // Example 5: Join a room with userData and settings with audio, video\n  // and bandwidth\n  SkylinkDemo.joinRoom({\n    'userData': {\n      'item1': 'My custom data',\n      'item2': 'Put whatever, string or JSON or array'\n    },\n    'audio' : {\n       'stereo' : true\n     },\n    'video' : {\n       'res' : SkylinkDemo.VIDEO_RESOLUTION.VGA,\n       'frameRate' : 50\n    },\n    'bandwidth' : {\n       'audio' : 48,\n       'video' : 256,\n       'data' : 14480\n     }\n  });\n\n  //Example 6: joinRoom with callback\n  SkylinkDemo.joinRoom(function(error, success){\n    if (error){\n      console.log('Error happened. Can not join room'));\n    }\n    else{\n      console.log('Successfully joined room');\n    }\n  });"
            ],
            "trigger": "peerJoined, mediaAccessRequired",
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 267,
            "description": "Waits for room to ready, before starting the Room connection.",
            "itemtype": "method",
            "name": "_waitForOpenChannel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data.",
                            "type": "JSON|String",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "This call requires audio stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Stream bandwidth settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio stream bandwidth in kbps.\n  Recommended: 50 kbps.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video",
                                    "description": "Video stream bandwidth in kbps.\n  Recommended: 256 kbps.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "data",
                                    "description": "Data stream bandwidth in kbps.\n  Recommended: 1638400 kbps.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "peerJoined, incomingStream, mediaAccessRequired",
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 343,
            "description": "Disconnects a User from the room.",
            "itemtype": "method",
            "name": "leaveRoom",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback fired after peer leaves the room.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  //Example 1: Just leaveRoom\n  SkylinkDemo.leaveRoom();\n\n  //Example 2: leaveRoom with callback\n  SkylinkDemo.leaveRoom(function(error, success){\n    if (error){\n      console.log('Error happened'));\n    }\n    else{\n      console.log('Successfully left room');\n    }\n  });"
            ],
            "trigger": "peerLeft, channelClose, streamEnded",
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 405,
            "description": "Locks the room to prevent other Peers from joining the room.",
            "itemtype": "method",
            "name": "lockRoom",
            "example": [
                "\n  SkylinkDemo.lockRoom();"
            ],
            "trigger": "lockRoom",
            "component": "Room",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 427,
            "description": "Unlocks the room to allow other Peers to join the room.",
            "itemtype": "method",
            "name": "unlockRoom",
            "example": [
                "\n  SkylinkDemo.unlockRoom();"
            ],
            "trigger": "lockRoom",
            "component": "Room",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 1,
            "description": "The list of Room initialization readyStates. This indicates if the\nrequired API information has been retrieved successfully from the API\nserver for the signaling connection.",
            "itemtype": "attribute",
            "name": "READY_STATE_CHANGE",
            "type": "JSON",
            "params": [
                {
                    "name": "INIT",
                    "description": "The initialization state.",
                    "type": "Number"
                },
                {
                    "name": "LOADING",
                    "description": "The API information is retrieving in progress.",
                    "type": "Number"
                },
                {
                    "name": "COMPLETED",
                    "description": "The API information has been retrieved.",
                    "type": "Number"
                },
                {
                    "name": "ERROR",
                    "description": "An error has occurred when retrieving API information.",
                    "type": "Number"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 23,
            "description": "The list of ready state change errors.\n- These are the error states from the error object error code.\n- <b>ROOM_LOCKED</b> is deprecated in 0.5.2. Please use\n  {{#crossLink \"Skylink/:attr\"}}leaveRoom(){{/crossLink}}\n- The states that would occur are:",
            "itemtype": "attribute",
            "name": "READY_STATE_CHANGE_ERROR",
            "type": "JSON",
            "params": [
                {
                    "name": "API_INVALID",
                    "description": "Api Key provided does not exist.",
                    "type": "Number"
                },
                {
                    "name": "API_DOMAIN_NOT_MATCH",
                    "description": "Api Key used in domain does\n  not match.",
                    "type": "Number"
                },
                {
                    "name": "API_CORS_DOMAIN_NOT_MATCH",
                    "description": "Api Key used in CORS\n  domain does not match.",
                    "type": "Number"
                },
                {
                    "name": "API_CREDENTIALS_INVALID",
                    "description": "Api Key credentials does\n  not exist.",
                    "type": "Number"
                },
                {
                    "name": "API_CREDENTIALS_NOT_MATCH",
                    "description": "Api Key credentials does not\n  match what is expected.",
                    "type": "Number"
                },
                {
                    "name": "API_INVALID_PARENT_KEY",
                    "description": "Api Key does not have a parent\n  key nor is a root key.",
                    "type": "Number"
                },
                {
                    "name": "API_NOT_ENOUGH_CREDIT",
                    "description": "Api Key does not have enough\n  credits to use.",
                    "type": "Number"
                },
                {
                    "name": "API_NOT_ENOUGH_PREPAID_CREDIT",
                    "description": "Api Key does not have\n  enough prepaid credits to use.",
                    "type": "Number"
                },
                {
                    "name": "API_FAILED_FINDING_PREPAID_CREDIT",
                    "description": "Api Key preapid\n  payments does not exist.",
                    "type": "Number"
                },
                {
                    "name": "API_NO_MEETING_RECORD_FOUND",
                    "description": "Api Key does not have a\n  meeting record at this timing. This occurs when Api Key is a\n  static one.",
                    "type": "Number"
                },
                {
                    "name": "ROOM_LOCKED",
                    "description": "Room is locked.",
                    "type": "Number"
                },
                {
                    "name": "NO_SOCKET_IO",
                    "description": "No socket.io dependency is loaded to use.",
                    "type": "Number"
                },
                {
                    "name": "NO_XMLHTTPREQUEST_SUPPORT",
                    "description": "Browser does not support\n  XMLHttpRequest to use.",
                    "type": "Number"
                },
                {
                    "name": "NO_WEBRTC_SUPPORT",
                    "description": "Browser does not have WebRTC support.",
                    "type": "Number"
                },
                {
                    "name": "NO_PATH",
                    "description": "No path is loaded yet.",
                    "type": "Number"
                },
                {
                    "name": "INVALID_XMLHTTPREQUEST_STATUS",
                    "description": "Invalid XMLHttpRequest\n  when retrieving information.",
                    "type": "Number"
                },
                {
                    "name": "ADAPTER_NO_LOADED",
                    "description": "AdapterJS dependency is not loaded.",
                    "type": "Number"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 86,
            "description": "The list of available regional servers.\n- This is for developers to set the nearest region server\n  for Skylink to connect to for faster connectivity.\n- The available regional servers are:",
            "itemtype": "attribute",
            "name": "REGIONAL_SERVER",
            "type": "JSON",
            "params": [
                {
                    "name": "APAC1",
                    "description": "Asia pacific server 1.",
                    "type": "String"
                },
                {
                    "name": "US1",
                    "description": "server 1.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 105,
            "description": "Force an SSL connection to signalling and API server.",
            "itemtype": "attribute",
            "name": "_forceSSL",
            "type": "Boolean",
            "default": "false",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 118,
            "description": "The path that user is currently connect to.\n- NOTE ALEX: check if last char is '/'",
            "itemtype": "attribute",
            "name": "_path",
            "type": "String",
            "default": "Skylink._serverPath",
            "final": 1,
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 133,
            "description": "The regional server that Skylink connects to.",
            "itemtype": "attribute",
            "name": "_serverRegion",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 144,
            "description": "The server that user connects to to make\napi calls to.\n- The reason why users can input this value is to give\n  users the chance to connect to any of our beta servers\n  if available instead of the stable version.",
            "itemtype": "attribute",
            "name": "_roomServer",
            "type": "String",
            "default": "'//api.temasys.com.sg'",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 160,
            "description": "The API Key ID.",
            "itemtype": "attribute",
            "name": "_apiKey",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 171,
            "description": "The default room that the user connects to if no room is provided in\n{{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}.",
            "itemtype": "attribute",
            "name": "_defaultRoom",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 183,
            "description": "The static room's meeting starting date and time.\n- The value is in ISO formatted string.",
            "itemtype": "attribute",
            "name": "_roomStart",
            "type": "String",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 196,
            "description": "The static room's meeting duration in hours.",
            "itemtype": "attribute",
            "name": "_roomDuration",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 208,
            "description": "The credentials required to set the start date and time\nand the duration.",
            "itemtype": "attribute",
            "name": "_roomCredentials",
            "type": "String",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 221,
            "description": "The current Skylink ready state change.\n[Rel: Skylink.READY_STATE_CHANGE]",
            "itemtype": "attribute",
            "name": "_readyState",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Room",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 234,
            "description": "The received server key.",
            "itemtype": "attribute",
            "name": "_key",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 245,
            "description": "The owner's username of the apiKey.",
            "itemtype": "attribute",
            "name": "_apiKeyOwner",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 256,
            "description": "The room connection information.",
            "itemtype": "attribute",
            "name": "_room",
            "type": "JSON",
            "params": [
                {
                    "name": "id",
                    "description": "The roomId of the room user is connected to.",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "The token of the room user is connected to.",
                    "type": "String"
                },
                {
                    "name": "startDateTime",
                    "description": "The startDateTime in ISO string format of the room.",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "The duration of the room.",
                    "type": "String"
                },
                {
                    "name": "connection",
                    "description": "Connection constraints and configuration.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "peerConstraints",
                            "description": "The peerconnection constraints.",
                            "type": "JSON"
                        },
                        {
                            "name": "peerConfig",
                            "description": "The peerconnection configuration.",
                            "type": "JSON"
                        },
                        {
                            "name": "offerConstraints",
                            "description": "The offer constraints.",
                            "type": "JSON"
                        },
                        {
                            "name": "sdpConstraints",
                            "description": "The sdp constraints.",
                            "type": "JSON"
                        }
                    ]
                }
            ],
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 277,
            "description": "Gets information from api server.",
            "itemtype": "method",
            "name": "_requestServerInfo",
            "params": [
                {
                    "name": "method",
                    "description": "The http method.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The url to do a rest call.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after Skylink\n  receives a response from the api server.",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "HTTP Params",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 351,
            "description": "Parse the information received from the api server.",
            "itemtype": "method",
            "name": "_parseInfo",
            "params": [
                {
                    "name": "info",
                    "description": "The parsed information from the server.",
                    "type": "JSON"
                }
            ],
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 424,
            "description": "Start the loading of information from the api server.",
            "itemtype": "method",
            "name": "_loadInfo",
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 494,
            "description": "Initialize Skylink to retrieve new connection information based on options.",
            "itemtype": "method",
            "name": "_initSelectedRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to connect to.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "Skylink._defaultRoom"
                },
                {
                    "name": "callback",
                    "description": "The callback fired once Skylink is re-initialized.",
                    "type": "Function"
                }
            ],
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 540,
            "description": "Initialize Skylink to retrieve connection information.\nThis is the first method to invoke before using any of Skylink functionalities.\n- Credentials parsing is not usabel.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "options",
                    "description": "Connection options or API Key ID",
                    "type": "String|JSON",
                    "props": [
                        {
                            "name": "apiKey",
                            "description": "API Key ID to identify with the Temasys\n  backend server",
                            "type": "String"
                        },
                        {
                            "name": "defaultRoom",
                            "description": "The default room to connect\n  to if there is no room provided in\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "roomServer",
                            "description": "Path to the Temasys\n  backend server. If there's no room provided, default room would be used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "region",
                            "description": "The regional server that user\n  chooses to use. [Rel: Skylink.REGIONAL_SERVER]",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "enableIceTrickle",
                            "description": "The option to enable\n  ICE trickle or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableDataChannel",
                            "description": "The option to enable\n  enableDataChannel or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableTURNServer",
                            "description": "To enable TURN servers in ice connection.\n  Please do so at your own risk as it might disrupt the connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableSTUNServer",
                            "description": "To enable STUN servers in ice connection.\n  Please do so at your own risk as it might disrupt the connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "TURNServerTransport",
                            "description": "Transport\n to set the transport packet type. [Rel: Skylink.TURN_TRANSPORT]",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "Skylink.TURN_TRANSPORT.ANY"
                        },
                        {
                            "name": "credentials",
                            "description": "Credentials options for\n  setting a static meeting.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "startDateTime",
                                    "description": "The start timing of the\n  meeting in Date ISO String",
                                    "type": "String"
                                },
                                {
                                    "name": "duration",
                                    "description": "The duration of the meeting in hours.<br>\n  E.g. <code>0.5</code> for half an hour, <code>1.4</code> for 1 hour and 24 minutes",
                                    "type": "Number"
                                },
                                {
                                    "name": "credentials",
                                    "description": "The credentials required\n  to set the timing and duration of a meeting.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "audioFallback",
                            "description": "To allow the option to fallback to\n  audio if failed retrieving video stream.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "forceSSL",
                            "description": "To force SSL connections to the API server\n  and signaling server.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "audioCodec",
                            "description": "The preferred audio codec to use.\n  It is only used when available.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "Skylink.AUDIO_CODEC.OPUS"
                        },
                        {
                            "name": "audioCodec",
                            "description": "The preferred video codec to use.\n  It is only used when available.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "Skylink.VIDEO_CODEC.OPUS"
                        },
                        {
                            "name": "socketTimeout",
                            "description": "To set the timeout for socket to fail\n  and attempt a reconnection. The mininum value is 5000.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "20000"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the room was initialized.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Note: Default room is apiKey when no room\n  // Example 1: To initalize without setting any default room.\n  SkylinkDemo.init('apiKey');\n\n  // Example 2: To initialize with apikey, roomServer and defaultRoom\n  SkylinkDemo.init({\n    'apiKey' : 'apiKey',\n    'roomServer' : 'http://xxxx.com',\n    'defaultRoom' : 'mainHangout'\n  });\n\n  // Example 3: To initialize with credentials to set startDateTime and\n  // duration of the room\n  var hash = CryptoJS.HmacSHA1(roomname + '_' + duration + '_' +\n    (new Date()).toISOString(), token);\n  var credentials = encodeURIComponent(hash.toString(CryptoJS.enc.Base64));\n  SkylinkDemo.init({\n    'apiKey' : 'apiKey',\n    'roomServer' : 'http://xxxx.com',\n    'defaultRoom' : 'mainHangout'\n    'credentials' : {\n       'startDateTime' : (new Date()).toISOString(),\n       'duration' : 500,\n       'credentials' : credentials\n    }\n  });\n\n  // Example 4: To initialize with callback\n  SkylinkDemo.init('apiKey',function(error,success){\n    if (error){\n      console.log('Init failed: '+JSON.stringify(error));\n    }\n    else{\n      console.log('Init succeed: '+JSON.stringify(success));\n    }\n  });"
            ],
            "trigger": "readyStateChange",
            "required": 1,
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 1,
            "description": "The log levels.\n- Order from highest to lowest is: error > warn > info > log > debug.\n- A log level displays logs of his level and higher (e.g warn level displays warn and error).",
            "itemtype": "attribute",
            "name": "LOG_LEVEL",
            "type": "JSON",
            "params": [
                {
                    "name": "DEBUG",
                    "description": "Level 5. Shows debug logs.",
                    "type": "Number"
                },
                {
                    "name": "LOG",
                    "description": "Level 4. Shows normal logs.",
                    "type": "Number"
                },
                {
                    "name": "INFO",
                    "description": "Level 3. Show informational logs related to user.",
                    "type": "Number"
                },
                {
                    "name": "WARN",
                    "description": "Level 2. Shows warnings.",
                    "type": "Number"
                },
                {
                    "name": "ERROR",
                    "description": "Level 1. Shows the errors that are thrown during\n  execution.",
                    "type": "Number"
                }
            ],
            "readonly": "",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 26,
            "description": "The log key",
            "itemtype": "attribute",
            "name": "_LOG_KEY",
            "type": "String",
            "scoped": "true",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 40,
            "description": "The list of level levels based on index.",
            "itemtype": "attribute",
            "name": "_LOG_LEVELS",
            "type": "Array",
            "required": 1,
            "scoped": "true",
            "access": "private",
            "tagname": "",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 53,
            "description": "The log level of Skylink",
            "itemtype": "attribute",
            "name": "_logLevel",
            "type": "String",
            "default": "Skylink.LOG_LEVEL.ERROR",
            "required": 1,
            "scoped": "true",
            "access": "private",
            "tagname": "",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 67,
            "description": "The current state if debugging mode is enabled.",
            "itemtype": "attribute",
            "name": "_enableDebugMode",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 81,
            "description": "The current state if debugging mode should store\nthe logs in SkylinkLogs.",
            "itemtype": "attribute",
            "name": "_enableDebugStack",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 96,
            "description": "The current state if debugging mode should\nprint the trace in every log information.",
            "itemtype": "attribute",
            "name": "_enableDebugTrace",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 111,
            "description": "An internal array of logs.",
            "itemtype": "attribute",
            "name": "_storedLogs",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 124,
            "description": "Gets the list of logs",
            "itemtype": "method",
            "name": "_getStoredLogsFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level that get() should return.\n If not provided, it get() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 151,
            "description": "Gets the list of logs",
            "itemtype": "method",
            "name": "_clearAllStoredLogsFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level that get() should return.\n If not provided, it get() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 169,
            "description": "Print out all the store logs in console.",
            "itemtype": "method",
            "name": "_printAllStoredLogsFn",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 195,
            "description": "Handles the list of Skylink logs.",
            "itemtype": "property",
            "name": "SkylinkLogs",
            "type": "JSON",
            "required": 1,
            "global": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 206,
            "description": "Gets the list of logs",
            "itemtype": "property",
            "name": "SkylinkLogs.getLogs",
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "type": "Function",
            "required": 1,
            "global": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "logLevel",
                    "description": "The log level that getLogs() should return.\n If not provided, it getLogs() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 222,
            "description": "Clear all the stored logs.",
            "itemtype": "property",
            "name": "SkylinkLogs.clearAllLogs",
            "type": "Function",
            "required": 1,
            "global": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 234,
            "description": "Print out all the store logs in console.",
            "itemtype": "property",
            "name": "SkylinkLogs.printAllLogs",
            "type": "Function",
            "required": 1,
            "global": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 247,
            "description": "Logs all the console information.",
            "itemtype": "method",
            "name": "_logFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "The console message.",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the message is targeted to.",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "The interface the message is targeted to.",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The events the message is targeted to.",
                            "type": "String|Array"
                        },
                        {
                            "name": "3:",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "debugObject",
                    "description": "The console parameter string or object.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 324,
            "description": "Logs all the console information.",
            "itemtype": "attribute",
            "name": "log",
            "type": "JSON",
            "params": [
                {
                    "name": "debug",
                    "description": "For debug mode.",
                    "type": "Function"
                },
                {
                    "name": "log",
                    "description": "For log mode.",
                    "type": "Function"
                },
                {
                    "name": "info",
                    "description": "For info mode.",
                    "type": "Function"
                },
                {
                    "name": "warn",
                    "description": "For warn mode.",
                    "type": "Function"
                },
                {
                    "name": "serror",
                    "description": "For error mode.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 341,
            "description": "Outputs a debug log in the console.",
            "itemtype": "property",
            "name": "log.debug",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 365,
            "description": "Outputs a normal log in the console.",
            "itemtype": "property",
            "name": "log.log",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.log('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 389,
            "description": "Outputs an info log in the console.",
            "itemtype": "property",
            "name": "log.info",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 413,
            "description": "Outputs a warning log in the console.",
            "itemtype": "property",
            "name": "log.warn",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('Here\\'s a warning. Please do xxxxx to resolve this issue', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 436,
            "description": "Outputs an error log in the console.",
            "itemtype": "property",
            "name": "log.error",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.\n  // Logging for external information\n  log.error('There has been an error', object);",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 460,
            "description": "Sets the debugging log level. A log level displays logs of his level and higher:\nERROR > WARN > INFO > LOG > DEBUG.\n- The default log level is Skylink.LOG_LEVEL.WARN",
            "itemtype": "method",
            "name": "setLogLevel",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level.[Rel: Skylink.Data.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n  //Display logs level: Error, warn, info, log and debug.\n  SkylinkDemo.setLogLevel(SkylinkDemo.LOG_LEVEL.DEBUG);"
            ],
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 487,
            "description": "Sets Skylink in debugging mode to display log stack trace.\n- By default, debugging mode is turned off.",
            "itemtype": "method",
            "name": "setDebugMode",
            "params": [
                {
                    "name": "options",
                    "description": "Is debugging mode enabled.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "trace",
                            "description": "If console output should trace.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "storeLogs",
                            "description": "If SkylinkLogs should store\n  the output logs.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: just to enable\n  SkylinkDemo.setDebugMode(true);\n  // or\n  SkylinkDemo.setDebugMode();\n\n  // Example 2: just to disable\n  SkylinkDemo.setDebugMode(false);"
            ],
            "component": "Log",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1,
            "description": "Syntactically private variables and utility functions.",
            "itemtype": "attribute",
            "name": "_EVENTS",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 13,
            "description": "Event fired when the socket connection to the signaling\nserver is open.",
            "itemtype": "event",
            "name": "channelOpen",
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 23,
            "description": "Event fired when the socket connection to the signaling\nserver has closed.",
            "itemtype": "event",
            "name": "channelClose",
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 33,
            "description": "Event fired when the socket connection received a message\nfrom the signaling server.",
            "itemtype": "event",
            "name": "channelMessage",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 44,
            "description": "Event fired when the socket connection has occurred an error.",
            "itemtype": "event",
            "name": "channelError",
            "params": [
                {
                    "name": "error",
                    "description": "Error message or object thrown.",
                    "type": "Object|String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 54,
            "description": "Event fired when the socket re-tries to connection with fallback ports.",
            "itemtype": "event",
            "name": "channelRetry",
            "params": [
                {
                    "name": "fallbackType",
                    "description": "The type of fallback [Rel: Skylink.SOCKET_FALLBACK]",
                    "type": "String"
                },
                {
                    "name": "currentAttempt",
                    "description": "The current attempt of the fallback re-try attempt.",
                    "type": "Number"
                }
            ],
            "component": "Events",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 65,
            "description": "Event fired when the socket connection failed connecting.\n- The difference between this and <b>channelError</b> is that\n  channelError triggers during the connection. This throws\n  when connection failed to be established.",
            "itemtype": "event",
            "name": "socketError",
            "params": [
                {
                    "name": "errorCode",
                    "description": "The error code.\n  [Rel: Skylink.SOCKET_ERROR]",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The reconnection attempt or error object.",
                    "type": "Number|String|Object"
                },
                {
                    "name": "fallbackType",
                    "description": "The type of fallback [Rel: Skylink.SOCKET_FALLBACK]",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 81,
            "description": "Event fired whether the room is ready for use.",
            "itemtype": "event",
            "name": "readyStateChange",
            "params": [
                {
                    "name": "readyState",
                    "description": "[Rel: Skylink.READY_STATE_CHANGE]",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "Error object thrown.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "status",
                            "description": "Http status when retrieving information.\n  May be empty for other errors.",
                            "type": "Number"
                        },
                        {
                            "name": "content",
                            "description": "Error message.",
                            "type": "String"
                        },
                        {
                            "name": "errorCode",
                            "description": "Error code.\n  [Rel: Skylink.READY_STATE_CHANGE_ERROR]",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "component": "Events",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 97,
            "description": "Event fired when a peer's handshake progress has changed.",
            "itemtype": "event",
            "name": "handshakeProgress",
            "params": [
                {
                    "name": "step",
                    "description": "The handshake progress step.\n  [Rel: Skylink.HANDSHAKE_PROGRESS]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer's handshake progress.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "Error message or object thrown.",
                    "type": "Object|String"
                }
            ],
            "component": "Events",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 110,
            "description": "Event fired when an ICE gathering state has changed.",
            "itemtype": "event",
            "name": "candidateGenerationState",
            "params": [
                {
                    "name": "state",
                    "description": "The ice candidate generation state.\n  [Rel: Skylink.CANDIDATE_GENERATION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had an ice candidate\n   generation state change.",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 123,
            "description": "Event fired when a peer Connection state has changed.",
            "itemtype": "event",
            "name": "peerConnectionState",
            "params": [
                {
                    "name": "state",
                    "description": "The peer connection state.\n  [Rel: Skylink.PEER_CONNECTION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had a peer connection state\n   change.",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 136,
            "description": "Event fired when an ICE connection state has changed.",
            "iceconnectionstate": "",
            "params": [
                {
                    "name": "state",
                    "description": "The ice connection state.\n  [Rel: Skylink.ICE_CONNECTION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had an ice connection state change.",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 148,
            "description": "Event fired when webcam or microphone media access fails.",
            "itemtype": "event",
            "name": "mediaAccessError",
            "params": [
                {
                    "name": "error",
                    "description": "Error object thrown.",
                    "type": "Object|String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 158,
            "description": "Event fired when webcam or microphone media acces passes.",
            "itemtype": "event",
            "name": "mediaAccessSuccess",
            "params": [
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "Object"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 168,
            "description": "Event fired when it's required to have audio or video access.",
            "itemtype": "event",
            "name": "mediaAccessRequired",
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 177,
            "description": "Event fired when media access to MediaStream has stopped.",
            "itemtype": "event",
            "name": "mediaAccessStopped",
            "component": "Events",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 186,
            "description": "Event fired when a peer joins the room.",
            "itemtype": "event",
            "name": "peerJoined",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that joined the room.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 222,
            "description": "Event fired when a peer's connection is restarted.",
            "itemtype": "event",
            "name": "peerRestart",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is being restarted.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON"
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number"
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number"
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelfInitiateRestart",
                    "description": "Is it us who initiated the restart.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 258,
            "description": "Event fired when a peer information is updated.",
            "itemtype": "event",
            "name": "peerUpdated",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had information updaed.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 294,
            "description": "Event fired when a peer leaves the room",
            "itemtype": "event",
            "name": "peerLeft",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that left.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 330,
            "description": "Event fired when a remote stream has become available.\n- This occurs after the user joins the room.\n- This is changed from <b>addPeerStream</b> event.\n- Note that <b>addPeerStream</b> is removed from the specs.\n- There has been a documentation error whereby the stream it is\n  supposed to be (stream, peerId, isSelf), but instead is received\n  as (peerId, stream, isSelf) in 0.5.0.",
            "itemtype": "event",
            "name": "incomingStream",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending the stream.",
                    "type": "String"
                },
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "Object"
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON"
                }
            ],
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 349,
            "description": "Event fired when a message being broadcasted is received.\n- This is changed from <b>chatMessageReceived</b>,\n  <b>privateMessage</b> and <b>publicMessage</b> event.\n- Note that <b>chatMessageReceived</b>, <b>privateMessage</b>\n  and <b>publicMessage</b> is removed from the specs.",
            "itemtype": "event",
            "name": "incomingMessage",
            "params": [
                {
                    "name": "message",
                    "description": "Message object that is received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "content",
                            "description": "Data that is broadcasted.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "PeerId of the sender peer.",
                            "type": "String"
                        },
                        {
                            "name": "targetPeerId",
                            "description": "PeerId that is specifically\n  targeted to receive the message.",
                            "type": "String"
                        },
                        {
                            "name": "isPrivate",
                            "description": "Is data received a private message.",
                            "type": "Boolean"
                        },
                        {
                            "name": "isDataChannel",
                            "description": "Is data received from a\n  data channel.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the sender peer.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 397,
            "description": "Event fired when connected to a room and the lock status has changed.",
            "itemtype": "event",
            "name": "roomLock",
            "params": [
                {
                    "name": "isLocked",
                    "description": "Is the room locked.",
                    "type": "Boolean"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is locking/unlocking\n  the room.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 435,
            "description": "Event fired when a peer's datachannel state has changed.",
            "itemtype": "event",
            "name": "dataChannelState",
            "params": [
                {
                    "name": "state",
                    "description": "The datachannel state.\n  [Rel: Skylink.DATA_CHANNEL_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of peer that has a datachannel\n  state change.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "Error message in case there is failure",
                    "type": "String",
                    "optional": true
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 449,
            "description": "Event fired when a data transfer state has changed.\n- Note that <u>transferInfo.data</u> sends the blob data, and\n  no longer a blob url.",
            "itemtype": "event",
            "name": "dataTransferState",
            "params": [
                {
                    "name": "state",
                    "description": "The data transfer state.\n  [Rel: Skylink.DATA_TRANSFER_STATE]",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "TransferId of the data.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that has a data\n  transfer state change.",
                    "type": "String"
                },
                {
                    "name": "transferInfo",
                    "description": "Data transfer information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "percentage",
                            "description": "The percetange of data being\n  uploaded / downloaded.",
                            "type": "JSON"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "PeerId of the sender.",
                            "type": "JSON"
                        },
                        {
                            "name": "data",
                            "description": "The blob data. See the\n  [createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL)\n  method on how you can convert the blob to a download link.",
                            "type": "JSON"
                        },
                        {
                            "name": "name",
                            "description": "Data name.",
                            "type": "JSON"
                        },
                        {
                            "name": "size",
                            "description": "Data size.",
                            "type": "JSON"
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "message",
                            "description": "Error message thrown.",
                            "type": "String"
                        },
                        {
                            "name": "transferType",
                            "description": "Is error from uploading or downloading.\n  [Rel: Skylink.DATA_TRANSFER_TYPE]",
                            "type": "String"
                        }
                    ]
                }
            ],
            "component": "Events",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 478,
            "description": "Event fired when the signaling server warns the user.",
            "itemtype": "event",
            "name": "systemAction",
            "params": [
                {
                    "name": "action",
                    "description": "The action that is required for\n  the user to follow. [Rel: Skylink.SYSTEM_ACTION]",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "The reason for the action.",
                    "type": "String"
                },
                {
                    "name": "reason",
                    "description": "The reason why the action is given.\n  [Rel: Skylink.SYSTEM_ACTION_REASON]",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 493,
            "description": "Events with callbacks that would be fired only once once condition is met.",
            "itemtype": "attribute",
            "name": "_onceEvents",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Events",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 505,
            "description": "The timestamp for throttle function to use.",
            "itemtype": "attribute",
            "name": "_timestamp",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Events",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 519,
            "description": "Trigger all the callbacks associated with an event.\n- Note that extra arguments can be passed to the callback which\n  extra argument can be expected by callback is documented by each event.",
            "itemtype": "method",
            "name": "_trigger",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 575,
            "description": "To register a callback function to an event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can register.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n  SkylinkDemo.on('peerJoined', function (peerId, peerInfo) {\n     alert(peerId + ' has joined the room');\n  });"
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 598,
            "description": "To register a callback function to an event that is fired once a condition is met.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can register.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this event.\n  If not provided, it will return true when the event is triggered.\n  Return a true to fire the callback.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "fireAlways",
                    "description": "The function does not get removed onced triggered,\n  but triggers everytime the event is called.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n  SkylinkDemo.once('peerConnectionState', function (state, peerId) {\n    alert('Peer has left');\n  }, function (state, peerId) {\n    return state === SkylinkDemo.PEER_CONNECTION_STATE.CLOSED;\n  });"
            ],
            "component": "Events",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 641,
            "description": "To unregister a callback function from an event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can unregister.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.\n  Not providing any callback turns all callbacks tied to that event off.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n  SkylinkDemo.off('peerJoined', callback);"
            ],
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 683,
            "description": "Does a check condition first to check if event is required to be subscribed.\nIf check condition fails, it subscribes an event with\n {{#crossLink \"Skylink/once:method\"}}once(){{/crossLink}} method to wait for\nthe condition to pass to fire the callback.",
            "itemtype": "method",
            "name": "_condition",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the condition is met.",
                    "type": "Function"
                },
                {
                    "name": "checkFirst",
                    "description": "The condition to check that if pass, it would fire the callback,\n  or it will just subscribe to an event and fire when condition is met.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this event.\n  If not provided, it will return true when the event is triggered.\n  Return a true to fire the callback.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "fireAlways",
                    "description": "The function does not get removed onced triggered,\n  but triggers everytime the event is called.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 722,
            "description": "Sets an interval check. If condition is met, fires callback.",
            "itemtype": "method",
            "name": "_wait",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback fired after the condition is met.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this the callback.",
                    "type": "Function"
                },
                {
                    "name": "intervalTime",
                    "description": "The interval loop timeout.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "50"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 765,
            "description": "Returns a wrapper of the original function, which only fires once during\n a specified amount of time.",
            "itemtype": "method",
            "name": "_throttle",
            "params": [
                {
                    "name": "func",
                    "description": "The function that should be throttled.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "The amount of time that function need to throttled (in ms)",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Events",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 1,
            "description": "The list of channel connection error.\n- The errors that would occur are:",
            "itemtype": "attribute",
            "name": "SOCKET_ERROR",
            "type": "JSON",
            "params": [
                {
                    "name": "CONNECTION_FAILED",
                    "description": "The connection failed. Up to user's\n  defined reconnection attempts to decide on a reconnection.",
                    "type": "Number"
                },
                {
                    "name": "RECONNECTION_FAILED",
                    "description": "The reconnection failed. Up to user's\n  defined reconnection attempts to decide on another reconnection.",
                    "type": "String"
                },
                {
                    "name": "CONNECTION_ABORTED",
                    "description": "No reconnection specified.\n  Connection is aborted.",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_ABORTED",
                    "description": "All reconnection attempts have failed.\n  Reconnection is aborted.",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_ATTEMPT",
                    "description": "A reconnection attempt has been fired.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Socket",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 28,
            "description": "The queue of messages to be sent to signaling server.",
            "itemtype": "attribute",
            "name": "_socketMessageQueue",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Socket",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 40,
            "description": "The timeout used to send socket message queue.",
            "itemtype": "attribute",
            "name": "_socketMessageTimeout",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Socket",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 53,
            "description": "The list of ports that SkylinkJS would use to attempt to connect to the signaling server with.",
            "itemtype": "attribute",
            "name": "_socketPorts",
            "type": "JSON",
            "params": [
                {
                    "name": "http://",
                    "description": "The list of HTTP ports.",
                    "type": "Array"
                },
                {
                    "name": "https://",
                    "description": "The list of HTTPs ports.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Socket",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 70,
            "description": "The list of channel connection fallback states.\n- The fallback states that would occur are:",
            "itemtype": "attribute",
            "name": "SOCKET_FALLBACK",
            "type": "JSON",
            "params": [
                {
                    "name": "NON_FALLBACK",
                    "description": "Non-fallback state,",
                    "type": "String"
                },
                {
                    "name": "FALLBACK_PORT",
                    "description": "Fallback to non-ssl port for channel re-try.",
                    "type": "String"
                },
                {
                    "name": "FALLBACK_PORT_SSL",
                    "description": "Fallback to ssl port for channel re-try.",
                    "type": "String"
                },
                {
                    "name": "LONG_POLLING",
                    "description": "Fallback to non-ssl long-polling.",
                    "type": "String"
                },
                {
                    "name": "LONG_POLLING_SSL",
                    "description": "Fallback to ssl port for long-polling.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Socket",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 93,
            "description": "The current socket opened state.",
            "itemtype": "attribute",
            "name": "_channelOpen",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Socket",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 105,
            "description": "The signaling server to connect to.",
            "itemtype": "attribute",
            "name": "_signalingServer",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 116,
            "description": "The signaling server protocol to use.\n<ul>\n<li><code>https:</code>\n<ul><li>Default port is <code>443</code>.</li>\n    <li>Fallback port is <code>3443</code>.</li>\n</ul></li>\n<li><code>http:</code>\n<ul><li>Default port is <code>80</code>.</li>\n    <li>Fallback port is <code>3000</code>.</li>\n</ul></li>\n</ul>",
            "itemtype": "attribute",
            "name": "_signalingServerProtocol",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 137,
            "description": "The signaling server port to connect to.",
            "itemtype": "attribute",
            "name": "_signalingServerPort",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 148,
            "description": "The actual socket object that handles the connection.",
            "itemtype": "attribute",
            "name": "_socket",
            "type": "Object",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 160,
            "description": "The socket connection timeout\n<ul>\n<li><code>0</code> Uses the default timeout from socket.io\n    <code>20000</code>ms.</li>\n<li><code>>0</code> Uses the user set timeout</li>\n</ul>",
            "itemtype": "attribute",
            "name": "_socketTimeout",
            "type": "Number",
            "default": "0",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 178,
            "description": "The socket connection to use XDomainRequest.",
            "itemtype": "attribute",
            "name": "_socketUseXDR",
            "type": "Boolean",
            "default": "false",
            "required": 1,
            "component": "Socket",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 191,
            "description": "Sends a message to the signaling server.\n- Not to be confused with method\n  {{#crossLink \"Skylink/sendMessage:method\"}}sendMessage(){{/crossLink}}\n  that broadcasts messages. This is for sending socket messages.",
            "itemtype": "method",
            "name": "_sendChannelMessage",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 293,
            "description": "Create the socket object to refresh connection.",
            "itemtype": "method",
            "name": "_createSocket",
            "params": [
                {
                    "name": "type",
                    "description": "The type of socket.io connection to use.\n<ul>\n<li><code>\"WebSocket\"</code>: Uses the WebSocket connection</li>\n<li><code>\"Polling\"</code>: Uses the long-polling connection</li>\n</ul>",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 454,
            "description": "Initiate a socket signaling connection.",
            "itemtype": "method",
            "name": "_openChannel",
            "trigger": "channelMessage, channelOpen, channelError, channelClose",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 488,
            "description": "Closes the socket signaling connection.",
            "itemtype": "method",
            "name": "_closeChannel",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1,
            "description": "Current version of signaling message protocol",
            "itemtype": "attribute",
            "name": "SM_PROTOCOL_VERSION",
            "type": "String",
            "required": 1,
            "component": "Socket",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 12,
            "description": "The Message protocol list. The <code>message</code> object is an\nindicator of the expected parameters to be given and received.",
            "itemtype": "attribute",
            "name": "_SIG_MESSAGE_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "JOIN_ROOM",
                    "description": "Send to initiate the connection to the Room.",
                    "type": "String"
                },
                {
                    "name": "ENTER",
                    "description": "Broadcasts to any Peers connected to the room to\n   intiate a Peer connection.",
                    "type": "String"
                },
                {
                    "name": "WELCOME",
                    "description": "Send as a response to Peer's enter received. User starts creating\n   offer to the Peer.",
                    "type": "String"
                },
                {
                    "name": "OFFER",
                    "description": "Send when <code>createOffer</code> is completed and generated.",
                    "type": "String"
                },
                {
                    "name": "ANSWER",
                    "description": "Send as a response to Peer's offer Message after <code>createAnswer</code>\n  is called.",
                    "type": "String"
                },
                {
                    "name": "CANDIDATE",
                    "description": "Send when an ICE Candidate is generated.",
                    "type": "String"
                },
                {
                    "name": "BYE",
                    "description": "Received as a response from server that a Peer has left the Room.",
                    "type": "String"
                },
                {
                    "name": "REDIRECT",
                    "description": "Received as a warning from server when User is rejected or\n  is jamming the server.",
                    "type": "String"
                },
                {
                    "name": "UPDATE_USER",
                    "description": "Broadcast when a User's information is updated to reflect the\n  the changes on Peer's end.",
                    "type": "String"
                },
                {
                    "name": "ROOM_LOCK",
                    "description": "Broadcast to change the Room lock status.",
                    "type": "String"
                },
                {
                    "name": "MUTE_VIDEO",
                    "description": "Broadcast when User's video stream is muted or unmuted.",
                    "type": "String"
                },
                {
                    "name": "MUTE_AUDIO",
                    "description": "Broadcast when User's audio stream is muted or unmuted.",
                    "type": "String"
                },
                {
                    "name": "PUBLIC_MESSAGE",
                    "description": "Broadcasts a Message object to all Peers in the Room.",
                    "type": "String"
                },
                {
                    "name": "PRIVATE_MESSAGE",
                    "description": "Sends a Message object to a Peer in the Room.",
                    "type": "String"
                },
                {
                    "name": "RESTART",
                    "description": "Sends when a Peer connection is restarted.",
                    "type": "String"
                },
                {
                    "name": "STREAM",
                    "description": "Broadcast when a Stream has ended. This is temporal.",
                    "type": "String"
                },
                {
                    "name": "GROUP",
                    "description": "Messages are bundled together when messages are sent too fast to\n  prevent server redirects over sending less than 1 second interval.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 68,
            "description": "List of signaling message types that can be queued before sending to server.",
            "itemtype": "attribute",
            "name": "_groupMessageList",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Message",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 87,
            "description": "The flag that indicates if MCU is enabled.",
            "itemtype": "attribute",
            "name": "_hasMCU",
            "type": "Boolean",
            "development": "true",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 100,
            "description": "Indicates whether the other peers should only receive stream\n\tfrom the current peer and not sending out any stream.\n\tSuitable for use cases such as streaming lecture/concert.",
            "itemtype": "attribute",
            "name": "_receiveOnly",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Message",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 115,
            "description": "Handles every incoming signaling message received.",
            "itemtype": "method",
            "name": "_processSigMessage",
            "params": [
                {
                    "name": "messageString",
                    "description": "The message object stringified received.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 136,
            "description": "Handles the single signaling message received.",
            "itemtype": "method",
            "name": "_processingSingleMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 215,
            "description": "Handles the REDIRECT Message event.",
            "itemtype": "method",
            "name": "_redirectHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "info",
                            "description": "The server's message.",
                            "type": "String"
                        },
                        {
                            "name": "action",
                            "description": "The action that User has to take on.\n  [Rel: Skylink.SYSTEM_ACTION]",
                            "type": "String"
                        },
                        {
                            "name": "reason",
                            "description": "The reason of why the action is worked upon.\n  [Rel: Skylink.SYSTEM_ACTION_REASON]",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"redirect\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "systemAction",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 249,
            "description": "Handles the UPDATE_USER Message event.",
            "itemtype": "method",
            "name": "_updateUserEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "userData",
                            "description": "The updated User data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"updateUserEvent\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 275,
            "description": "Handles the ROOM_LOCK Message event.",
            "itemtype": "method",
            "name": "_roomLockEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "lock",
                            "description": "The flag to indicate if the Room is locked or not",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"roomLockEvent\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "roomLock",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 296,
            "description": "Handles the MUTE_AUDIO Message event.",
            "itemtype": "method",
            "name": "_muteAudioEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.MUTE_AUDIO.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 319,
            "description": "Handles the MUTE_VIDEO Message event.",
            "itemtype": "method",
            "name": "_muteVideoEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "muted",
                            "description": "The flag to indicate if the User's video\n   stream is muted or not.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"muteVideoEvent\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 346,
            "description": "Handles the STREAM Message event.",
            "itemtype": "method",
            "name": "_streamEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The peerId of the sender.",
                            "type": "String"
                        },
                        {
                            "name": "status",
                            "description": "The MediaStream status.\n<ul>\n<li><code>ended</code>: MediaStream has ended</li>\n</ul>",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"stream\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 379,
            "description": "Handles the BYTE Message event.",
            "itemtype": "method",
            "name": "_byeHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The peerId of the Peer that has left the Room.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"bye\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerLeft",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 398,
            "description": "Handles the PRIVATE_MESSAGE Message event.",
            "itemtype": "method",
            "name": "_privateMessageHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "data",
                            "description": "The Message object.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "cid",
                            "description": "The credentialId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "target",
                            "description": "The peerId of the targeted Peer.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"private\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "privateMessage",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 427,
            "description": "Handles the PUBLIC_MESSAGE Message event.",
            "itemtype": "method",
            "name": "_publicMessageHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "muted",
                            "description": "The flag to indicate if the User's audio\n   stream is muted or not.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"muteAudioEvent\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "publicMessage",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 455,
            "description": "Handles the IN_ROOM Message event.",
            "itemtype": "method",
            "name": "_inRoomHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": []
                },
                {
                    "name": "message",
                    "description": "Expected IN_ROOM data object format.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "",
                            "description": "The roomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The User's userId.",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The Peer connection iceServers configuration.",
                            "type": "JSON"
                        },
                        {
                            "name": "",
                            "description": "Protocol step: <code>\"inRoom\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerJoined",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 497,
            "description": "Handles the ENTER Message event.",
            "itemtype": "method",
            "name": "_enterHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId / userId.",
                            "type": "String"
                        },
                        {
                            "name": "receiveOnly",
                            "description": "The flag to prevent Peers from sending\n  any Stream to the User but receive User's stream only.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "agent",
                            "description": "The Peer's browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The Peer's browser version.",
                            "type": "String"
                        },
                        {
                            "name": "userInfo",
                            "description": "The Peer's information.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "settings",
                                    "description": "The stream settings",
                                    "type": "JSON"
                                },
                                {
                                    "name": "settings.audio",
                                    "description": "The flag to indicate if audio is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.audio.stereo",
                                    "description": "The flag to indiciate if stereo should be enabled in OPUS connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video",
                                    "description": "The flag to indicate if video is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video.resolution",
                                    "description": "[Rel: Skylink.VIDEO_RESOLUTION]\n  The video stream resolution.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.frameRate",
                                    "description": "The video stream maximum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mediaStatus",
                                    "description": "The Peer's Stream status.\n  This is used to indicate if connected video or audio stream is muted.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "mediaStatus.audioMuted",
                                    "description": "The flag to indicate that the Peer's audio stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mediaStatus.videoMuted",
                                    "description": "The flag to indicate that the Peer's video stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userData",
                                    "description": "The custom User data.",
                                    "type": "String|JSON"
                                }
                            ]
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"enter\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress, peerJoined",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 604,
            "description": "Handles the RESTART Message event.",
            "itemtype": "method",
            "name": "_restartHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId / userId.",
                            "type": "String"
                        },
                        {
                            "name": "receiveOnly",
                            "description": "The flag to prevent Peers from sending\n  any Stream to the User but receive User's stream only.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableIceTrickle",
                            "description": "The flag to forcefully enable or disable ICE Trickle for the Peer connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableDataChannel",
                            "description": "The flag to forcefully enable or disable ICE Trickle for the Peer connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "agent",
                            "description": "The Peer's browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The Peer's browser version.",
                            "type": "String"
                        },
                        {
                            "name": "userInfo",
                            "description": "The Peer's information.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "settings",
                                    "description": "The stream settings",
                                    "type": "JSON"
                                },
                                {
                                    "name": "settings.audio",
                                    "description": "The flag to indicate if audio is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.audio.stereo",
                                    "description": "The flag to indiciate if stereo should be enabled in OPUS connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video",
                                    "description": "The flag to indicate if video is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video.resolution",
                                    "description": "[Rel: Skylink.VIDEO_RESOLUTION]\n  The video stream resolution.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.frameRate",
                                    "description": "The video stream maximum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mediaStatus",
                                    "description": "The Peer's Stream status.\n  This is used to indicate if connected video or audio stream is muted.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "mediaStatus.audioMuted",
                                    "description": "The flag to indicate that the Peer's audio stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mediaStatus.videoMuted",
                                    "description": "The flag to indicate that the Peer's video stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userData",
                                    "description": "The custom User data.",
                                    "type": "String|JSON"
                                }
                            ]
                        },
                        {
                            "name": "target",
                            "description": "The peerId of the peer to respond the enter message to.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"restart\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress, peerRestart",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 719,
            "description": "Handles the WELCOME Message event.",
            "itemtype": "method",
            "name": "_welcomeHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId / userId.",
                            "type": "String"
                        },
                        {
                            "name": "receiveOnly",
                            "description": "The flag to prevent Peers from sending\n  any Stream to the User but receive User's stream only.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableIceTrickle",
                            "description": "The flag to forcefully enable or disable ICE Trickle for the Peer connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableDataChannel",
                            "description": "The flag to forcefully enable or disable ICE Trickle for the Peer connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "agent",
                            "description": "The Peer's browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The Peer's browser version.",
                            "type": "String"
                        },
                        {
                            "name": "userInfo",
                            "description": "The Peer's information.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "settings",
                                    "description": "The stream settings",
                                    "type": "JSON"
                                },
                                {
                                    "name": "settings.audio",
                                    "description": "The flag to indicate if audio is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.audio.stereo",
                                    "description": "The flag to indiciate if stereo should be enabled in OPUS connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video",
                                    "description": "The flag to indicate if video is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video.resolution",
                                    "description": "[Rel: Skylink.VIDEO_RESOLUTION]\n  The video stream resolution.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.frameRate",
                                    "description": "The video stream maximum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mediaStatus",
                                    "description": "The Peer's Stream status.\n  This is used to indicate if connected video or audio stream is muted.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "mediaStatus.audioMuted",
                                    "description": "The flag to indicate that the Peer's audio stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mediaStatus.videoMuted",
                                    "description": "The flag to indicate that the Peer's video stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userData",
                                    "description": "The custom User data.",
                                    "type": "String|JSON"
                                }
                            ]
                        },
                        {
                            "name": "target",
                            "description": "The peerId of the peer to respond the enter message to.",
                            "type": "String"
                        },
                        {
                            "name": "weight",
                            "description": "The priority weight of the message. This is required\n  when two Peers receives each other's welcome message, hence disrupting the handshaking to\n  be incorrect. With a generated weight usually done by invoking <code>Date.UTC()</code>, this\n  would check against the received weight and generated weight for the Peer to prioritize who\n  should create or receive the offer.\n<ul>\n<li><code>>=0</code> An ongoing weight priority check is going on.Weight priority message.</li>\n<li><code>-1</code> Enforce create offer to happen without any priority weight check.</li>\n<li><code>-2</code> Enforce create offer and re-creating of Peer connection to happen without\n   any priority weight check.</li>\n</ul>",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"welcome\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress, peerJoined",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 854,
            "description": "Handles the OFFER Message event.",
            "itemtype": "method",
            "name": "_offerHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "sdp",
                            "description": "The generated offer session description.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"offer\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 903,
            "description": "Handles the CANDIDATE Message event.",
            "itemtype": "method",
            "name": "_candidateHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "sdp",
                            "description": "The ICE Candidate's session description.",
                            "type": "String"
                        },
                        {
                            "name": "target",
                            "description": "The peerId of the targeted Peer.",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "The ICE Candidate's id.",
                            "type": "String"
                        },
                        {
                            "name": "candidate",
                            "description": "The ICE Candidate's candidate object.",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "The ICE Candidate's label.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"candidate\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 978,
            "description": "Handles the ANSWER Message event.",
            "itemtype": "method",
            "name": "_answerHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "sdp",
                            "description": "The generated answer session description.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"answer\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1034,
            "description": "Sends Message object to either a targeted Peer or Broadcasts to all Peers connected in the Room.\n- Message is sent using the socket connection to the signaling server and relayed to\n  the recipient(s). For direct messaging to a recipient refer to\n  {{#crossLink \"Skylink/sendP2PMessage:method\"}}sendP2PMessage(){{/crossLink}}.",
            "itemtype": "method",
            "name": "sendMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message data to send.",
                    "type": "String|JSON"
                },
                {
                    "name": "targetPeerId",
                    "description": "PeerId of the peer to send a private\n  message data to. If not specified then send to all peers.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send to all peers\n  SkylinkDemo.sendMessage('Hi there!');\n\n  // Example 2: Send to a targeted peer\n  SkylinkDemo.sendMessage('Hi there peer!', targetPeerId);"
            ],
            "trigger": "incomingMessage",
            "component": "Message",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1,
            "description": "The list of available Video Codecs.\n- Note that setting this video codec does not mean that it will be\n  the primary codec used for the call as it may vary based on the offerer's\n  codec set.\n- The available video codecs are:",
            "itemtype": "attribute",
            "name": "VIDEO_CODEC",
            "params": [
                {
                    "name": "AUTO",
                    "description": "The default option. This means to use any video codec given by generated sdp.",
                    "type": "String"
                },
                {
                    "name": "VP8",
                    "description": "Use the VP8 video codec. This is the common and mandantory video codec used.",
                    "type": "String"
                },
                {
                    "name": "H264",
                    "description": "Use the H264 video codec. This only works if the browser supports H264.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "component": "Stream",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 23,
            "description": "The list of available Audio Codecs.\n- Note that setting this audio codec does not mean that it will be\n  the primary codec used for the call as it may vary based on the offerer's\n  codec set.\n- The available audio codecs are:",
            "itemtype": "attribute",
            "name": "AUDIO_CODEC",
            "params": [
                {
                    "name": "AUTO",
                    "description": "The default option. This means to use any audio codec given by generated sdp.",
                    "type": "String"
                },
                {
                    "name": "OPUS",
                    "description": "Use the OPUS audio codec.\n  This is the common and mandantory audio codec used. This codec supports stereo.",
                    "type": "String"
                },
                {
                    "name": "ISAC",
                    "description": "Use the ISAC audio codec.\n  This only works if the browser supports ISAC. This codec is mono based.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "component": "Stream",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 47,
            "description": "Stores the preferred audio codec.",
            "itemtype": "attribute",
            "name": "_selectedAudioCodec",
            "type": "String",
            "default": "Skylink.AUDIO_CODEC.OPUS",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 59,
            "description": "Stores the preferred video codec.",
            "itemtype": "attribute",
            "name": "_selectedVideoCodec",
            "type": "String",
            "default": "Skylink.VIDEO_CODEC.VP8",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 72,
            "description": "The list of recommended video resolutions.\n- Note that the higher the resolution, the connectivity speed might\n  be affected.\n- The available video resolutions type are: (See\n{{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}\n  for more information)",
            "params": [
                {
                    "name": "QQVGA",
                    "description": "QQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "160",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "120",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HQVGA",
                    "description": "HQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "240",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "160",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QVGA",
                    "description": "QVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "320",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "240",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WQVGA",
                    "description": "WQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "384",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "240",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:10",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HVGA",
                    "description": "HVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "480",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "320",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "VGA",
                    "description": "VGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "640",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "480",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WVGA",
                    "description": "WVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "768",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "480",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:10",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FWVGA",
                    "description": "FWVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "854",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "480",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "SVGA",
                    "description": "SVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "800",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "600",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "DVGA",
                    "description": "DVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "960",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "640",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WSVGA",
                    "description": "WSVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1024",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "576",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HD",
                    "description": "HD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1280",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "720",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HDPLUS",
                    "description": "HDPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1600",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "900",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FHD",
                    "description": "FHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1920",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "1080",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QHD",
                    "description": "QHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "2560",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "1440",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WQXGAPLUS",
                    "description": "WQXGAPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "3200",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "1800",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "UHD",
                    "description": "UHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "3840",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "2160",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "UHDPLUS",
                    "description": "UHDPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "5120",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "2880",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FUHD",
                    "description": "FUHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "7680",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "4320",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QUHD",
                    "description": "resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "15360",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "8640",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                }
            ],
            "itemtype": "attribute",
            "name": "VIDEO_RESOLUTION",
            "type": "JSON",
            "readonly": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 189,
            "description": "The list of local media streams.",
            "itemtype": "attribute",
            "name": "_mediaStream",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 200,
            "description": "Stores the local MediaStream for screensharing.",
            "itemtype": "attribute",
            "name": "_mediaScreen",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 211,
            "description": "Stores the local MediaStream clone for audio screensharing.",
            "itemtype": "attribute",
            "name": "_mediaScreenClone",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 222,
            "description": "The user stream settings.",
            "itemtype": "attribute",
            "name": "_defaultStreamSettings",
            "type": "JSON",
            "params": [
                {
                    "name": "audio",
                    "description": "If user enables audio, this is the default setting.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "stereo",
                            "description": "Enabled stereo or not",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "video",
                    "description": "If user enables video, this is the default setting.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "frameRate",
                            "description": "Maximum frameRate of Video",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "bandwidth",
                    "description": "Bandwidth settings.",
                    "type": "String",
                    "props": [
                        {
                            "name": "audio",
                            "description": "Audio default Bandwidth",
                            "type": "String"
                        },
                        {
                            "name": "video",
                            "description": "Video default Bandwidth",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Data default Bandwidth.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.7",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 260,
            "description": "The user stream settings.",
            "itemtype": "attribute",
            "name": "_streamSettings",
            "type": "JSON",
            "params": [
                {
                    "name": "audio",
                    "description": "This call requires audio",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "stereo",
                            "description": "Enabled stereo or not",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "video",
                    "description": "This call requires video",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "frameRate",
                            "description": "Maximum frameRate of Video",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "bandwidth",
                    "description": "Bandwidth settings",
                    "type": "String",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Audio Bandwidth",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "video",
                            "description": "Video Bandwidth",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "Data Bandwidth.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 282,
            "description": "The getUserMedia settings parsed from\n{{#crossLink \"Skylink/_streamSettings:attr\"}}_streamSettings{{/crossLink}}.",
            "itemtype": "attribute",
            "name": "_getUserMediaSettings",
            "type": "JSON",
            "params": [
                {
                    "name": "audio",
                    "description": "This call requires audio.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "video",
                    "description": "This call requires video.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "mandatory.maxHeight",
                            "description": "Video maximum width.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mandatory.maxWidth",
                            "description": "Video maximum height.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mandatory.maxFrameRate",
                            "description": "Maximum frameRate of Video.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "optional",
                            "description": "The getUserMedia options.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 300,
            "description": "The user MediaStream(s) status.",
            "itemtype": "attribute",
            "name": "_mediaStreamsStatus",
            "type": "JSON",
            "params": [
                {
                    "name": "audioMuted",
                    "description": "Is user's audio muted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "videoMuted",
                    "description": "Is user's vide muted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 313,
            "description": "Fallback to audio call if audio and video is required.",
            "itemtype": "attribute",
            "name": "_audioFallback",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Stream",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 326,
            "description": "Access to user's MediaStream is successful.",
            "itemtype": "method",
            "name": "_onUserMediaSuccess",
            "params": [
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "MediaStream"
                },
                {
                    "name": "isScreenSharing",
                    "description": "The flag that indicates\n  if stream is a screensharing stream.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "mediaAccessSuccess",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 401,
            "description": "Access to user's MediaStream failed.",
            "itemtype": "method",
            "name": "_onUserMediaError",
            "params": [
                {
                    "name": "error",
                    "description": "Error object that was thrown.",
                    "type": "Object"
                },
                {
                    "name": "isScreenSharing",
                    "description": "The flag that indicates\n  if stream is a screensharing stream.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "mediaAccessError",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 436,
            "description": "The remote peer advertised streams, that we are forwarding to the app. This is part\nof the peerConnection's addRemoteDescription() API's callback.",
            "itemtype": "method",
            "name": "_onRemoteStreamAdded",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer that has remote stream to send.",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "This is provided directly by the peerconnection API.",
                    "type": "Event"
                },
                {
                    "name": "isScreenSharing",
                    "description": "The flag that indicates\n  if stream is a screensharing stream.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "incomingStream",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 483,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseAudioStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "This call requires audio",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "stereo",
                            "description": "Enabled stereo or not.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed audio options.\n- settings: User set audio options\n- userMedia: getUserMedia options",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 517,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseAudioStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "This call requires video",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "frameRate",
                            "description": "Maximum frameRate of Video",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed video options.\n- settings: User set video options\n- userMedia: getUserMedia options",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 581,
            "description": "Parse and set bandwidth settings.",
            "itemtype": "method",
            "name": "_parseBandwidthSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Bandwidth settings",
                    "type": "String",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Audio Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "video",
                            "description": "Video Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "256"
                        },
                        {
                            "name": "data",
                            "description": "Data Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "1638400"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 611,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseMutedSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of video.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed muted options.",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 646,
            "description": "Parse stream default settings",
            "itemtype": "method",
            "name": "_parseDefaultMediaStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Media default Constraints.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "maxWidth",
                            "description": "Video default width.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "640"
                        },
                        {
                            "name": "maxHeight",
                            "description": "Video default height.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "480"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.7",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 677,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseMediaStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of video.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 724,
            "description": "Sends our Local MediaStreams to other Peers.\nBy default, it sends all it's other stream",
            "itemtype": "method",
            "name": "_addLocalMediaStreams",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to send local stream to.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 771,
            "description": "Stops current MediaStream playback and streaming.",
            "itemtype": "method",
            "name": "stopStream",
            "example": [
                "\n  SkylinkDemo.stopStream();"
            ],
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 792,
            "description": "Handles the muting of audio and video streams.",
            "itemtype": "method",
            "name": "_muteLocalMediaStreams",
            "return": {
                "description": "options.hasVideoTracks If MediaStream(s) has video tracks."
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 877,
            "description": "Waits for MediaStream.\n- Once the stream is loaded, callback is called\n- If there's not a need for stream, callback is called",
            "itemtype": "method",
            "name": "_waitForLocalMediaStream",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback after requested constraints are loaded.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data.",
                            "type": "JSON",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of Video",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Bandwidth settings",
                            "type": "String",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio Bandwidth",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "video",
                                    "description": "Video Bandwidth",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "data",
                                    "description": "Data Bandwidth",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "mediaAccessRequired",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 986,
            "description": "Gets the default video source and microphone source.\n- This is an implemented function for Skylink.\n- Constraints are not the same as the [MediaStreamConstraints](http://dev.w3.\n  org/2011/webrtc/editor/archives/20140817/getusermedia.html#dictionary\n  -mediastreamconstraints-members) specified in the w3c specs.\n- Calling <b>getUserMedia</b> while having streams being sent to another peer may\n  actually cause problems, because currently <b>getUserMedia</b> refreshes all streams.",
            "itemtype": "method",
            "name": "getUserMedia",
            "params": [
                {
                    "name": "options",
                    "description": "MediaStream constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Option to allow audio stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "true",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Option to allow video stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "true",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after media was successfully accessed.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Default is to get both audio and video\n  // Example 1: Get both audio and video by default.\n  SkylinkDemo.getUserMedia();\n\n  // Example 2: Get the audio stream only\n  SkylinkDemo.getUserMedia({\n    'video' : false,\n    'audio' : true\n  });\n\n  // Example 3: Set the stream settings for the audio and video\n  SkylinkDemo.getUserMedia({\n    'video' : {\n       'resolution': SkylinkDemo.VIDEO_RESOLUTION.HD,\n       'frameRate': 50\n     },\n    'audio' : {\n      'stereo': true\n    }\n  });\n\n  // Example 4: Get user media with callback\n  SkylinkDemo.getUserMedia({\n    'video' : false,\n    'audio' : true\n  },function(error,success){\n     if (error){\n       console.log(error);\n     }\n     else{\n       console.log(success);\n    }\n  });"
            ],
            "trigger": "mediaAccessSuccess, mediaAccessError, streamEnded",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1098,
            "description": "Resends a Local MediaStreams. This overrides all previous MediaStreams sent.\nProvided MediaStream would be automatically detected as unmuted by default.",
            "itemtype": "method",
            "name": "sendStream",
            "params": [
                {
                    "name": "stream",
                    "description": "The stream object or options.",
                    "type": "Object|JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "If send a new stream with audio.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If send a new stream with audio muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Option to allow video stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If send a new stream with video muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after stream was sent.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send a stream object instead\n  SkylinkDemo.on('mediaAccessSuccess', function (stream) {\n    SkylinkDemo.sendStream(stream);\n  });\n\n  // Example 2: Send stream with getUserMedia automatically called for you\n  SkylinkDemo.sendStream({\n    audio: true,\n    video: false\n  });\n\n  // Example 3: Send stream with getUserMedia automatically called for you\n  // and audio is muted\n  SkylinkDemo.sendStream({\n    audio: { mute: true },\n    video: false\n  });\n\n  // Example 4: Send stream with callback\n  SkylinkDemo.sendStream({\n   audio: true,\n   video: true\n  },function(error,success){\n   if (error){\n     console.log('Error occurred. Stream was not sent: '+error)\n   }\n   else{\n     console.log('Stream successfully sent: '+success);\n   }\n  });"
            ],
            "trigger": "peerRestart, incomingStream",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1251,
            "description": "Mutes a Local MediaStreams.",
            "itemtype": "method",
            "name": "muteStream",
            "params": [
                {
                    "name": "options",
                    "description": "The muted options.",
                    "type": "Object|JSON",
                    "props": [
                        {
                            "name": "audioMuted",
                            "description": "If send a new stream with audio muted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "videoMuted",
                            "description": "If send a new stream with video muted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "example": [
                "\n  SkylinkDemo.muteStream({\n    audioMuted: true,\n    videoMuted: false\n  });"
            ],
            "trigger": "peerRestart, peerUpdated, incomingStream",
            "component": "Stream",
            "since": "0.5.7",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1356,
            "description": "Enable microphone.\n- Try to start the audio source.\n- If no audio source was initialy set, this function has no effect.\n- If you want to activate your audio but haven't initially enabled it you would need to\n  reinitiate your connection with\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}\n  process and set the audio parameter to true.",
            "itemtype": "method",
            "name": "enableAudio",
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "example": [
                "\n  SkylinkDemo.enableAudio();"
            ],
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1379,
            "description": "Disable microphone.\n- Try to disable the microphone.\n- If no microphone was initially set, this function has no effect.",
            "itemtype": "method",
            "name": "disableAudio",
            "example": [
                "\n  SkylinkDemo.disableAudio();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1398,
            "description": "Enable webcam video.\n- Try to start the video source.\n- If no video source was initialy set, this function has no effect.\n- If you want to activate your video but haven't initially enabled it you would need to\n  reinitiate your connection with\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}\n  process and set the video parameter to true.",
            "itemtype": "method",
            "name": "enableVideo",
            "example": [
                "\n  SkylinkDemo.enableVideo();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1421,
            "description": "Disable video source.\n- Try to disable the video source.\n- If no video source was initially set, this function has no effect.",
            "itemtype": "method",
            "name": "disableVideo",
            "example": [
                "\n  SkylinkDemo.disableVideo();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1440,
            "description": "Shares the current screen with users.\n- You will require our own Temasys Skylink extension to do screensharing.\n  Currently, opera does not support this feature.",
            "itemtype": "method",
            "name": "shareScreen",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback fired after media was successfully accessed.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Share the screen\n  SkylinkDemo.shareScreen();\n\n  // Example 2: Share screen with callback when screen is ready and shared\n  SkylinkDemo.shareScreen(function(error,success){\n     if (error){\n       console.log(error);\n     }\n     else{\n       console.log(success);\n    }\n  });"
            ],
            "trigger": "mediaAccessSuccess, mediaAccessError, incomingStream",
            "component": "Stream",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1538,
            "description": "Stops screensharing MediaStream playback and streaming.",
            "itemtype": "method",
            "name": "stopScreen",
            "example": [
                "\n  SkylinkDemo.stopScreen();"
            ],
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 1,
            "description": "Enables the stereo feature by modifying the SDP. This requires the OPUS\nto be enabled in the connection first.",
            "itemtype": "method",
            "name": "_addSDPStereo",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated version with Stereo feature",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 61,
            "description": "Sets the video resolution by modifying the SDP.\n- This is broken.",
            "itemtype": "method",
            "name": "_setSDPVideoResolution",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated version with custom Resolution settings",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 149,
            "description": "Set the audio, video and data streamming bandwidth by modifying the SDP.\nIt sets the bandwidth when the connection is good. In low bandwidth environment,\nthe bandwidth is managed by the browser.",
            "itemtype": "method",
            "name": "_setSDPBitrate",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "The session description received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated session description.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 213,
            "description": "Sets the audio codec for the connection,",
            "itemtype": "method",
            "name": "_setSDPVideoCodec",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "The session description received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated session description.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 269,
            "description": "Sets the audio codec for the connection,",
            "itemtype": "method",
            "name": "_setSDPAudioCodec",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "The session description received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated session description.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 324,
            "description": "Removes Firefox 32 H262 preference in the SDP to prevent breaking connection in\nunsupported browsers.",
            "itemtype": "method",
            "name": "_removeSDPFirefoxH264Pref",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "The session description received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated session description.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.2",
            "class": "Skylink"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:36"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-channel.js:49"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:49"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:136"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-channel.js:180"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:180"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:212"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:14"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:29"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:48"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:71"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:12"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:41"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:58"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:90"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:102"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:114"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:126"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:138"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:151"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:201"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:222"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:305"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:351"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:351"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:399"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:399"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:469"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:469"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:498"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:531"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:531"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:592"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:592"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:691"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:691"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:877"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:877"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:915"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:915"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:986"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:986"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:13"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:26"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/ice-candidate.js:48"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:48"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:97"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:115"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:128"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:141"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:41"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:61"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:74"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:86"
        },
        {
            "message": "unknown tag: development",
            "line": " source/ice-connection.js:98"
        },
        {
            "message": "unknown tag: unsupported",
            "line": " source/ice-connection.js:98"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:98"
        },
        {
            "message": "unknown tag: development",
            "line": " source/ice-connection.js:113"
        },
        {
            "message": "unknown tag: unsupported",
            "line": " source/ice-connection.js:113"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:113"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:128"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:141"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:153"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:194"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:24"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:36"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:48"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:73"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:126"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-connection.js:250"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:250"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:307"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:448"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:13"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:29"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-data.js:41"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:41"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:90"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:120"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:135"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:35"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:58"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:144"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:174"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:234"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-handshake.js:259"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:259"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:18"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:53"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:65"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:76"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:76"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:267"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:267"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:343"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:343"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:405"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:405"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:427"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:427"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:86"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:105"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:118"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:133"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:144"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:160"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:171"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:183"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:196"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:208"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:221"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:234"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:245"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:256"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:277"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:351"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:351"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:424"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:424"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:494"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:494"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:540"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:540"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:1"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:26"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:26"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:40"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:40"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:53"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:53"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:67"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:67"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:81"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:81"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:96"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:96"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:111"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:111"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:124"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:124"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:151"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:151"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:169"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:169"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:195"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:206"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:222"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:234"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:247"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:247"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:324"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:324"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:341"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:341"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:365"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:365"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:389"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:389"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:413"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:436"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:436"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:460"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:487"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:13"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:33"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:44"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:54"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:65"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:81"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:97"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:110"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:123"
        },
        {
            "message": "unknown tag: iceconnectionstate",
            "line": " source/skylink-events.js:136"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:136"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:148"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:158"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:168"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:177"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:186"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:222"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:258"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:294"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:330"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:349"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:397"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:435"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:449"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:478"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:493"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:505"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:519"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:575"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:598"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:641"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:683"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:722"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:765"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:28"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:40"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:53"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:70"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:93"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:105"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:116"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:137"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:148"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:160"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:178"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:191"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:293"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-channel.js:454"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:454"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:488"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:12"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:68"
        },
        {
            "message": "unknown tag: development",
            "line": " source/socket-message.js:87"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:87"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:100"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:115"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:136"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:215"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:215"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:249"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:249"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:275"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:275"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:296"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:296"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:319"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:319"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:346"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:346"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:379"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:379"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:398"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:398"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:427"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:427"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:455"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:455"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:497"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:497"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:604"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:604"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:719"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:719"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:854"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:854"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:903"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:978"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:978"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:1034"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:1034"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:47"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:59"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:72"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:189"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:200"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:211"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:222"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:260"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:282"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:300"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:313"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:326"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:326"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:401"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:401"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:436"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:436"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:483"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:517"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:581"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:611"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:646"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:677"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:724"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:877"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:877"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:986"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:986"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1098"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1098"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1251"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1251"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1356"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1356"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1379"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1379"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1398"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1398"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1421"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1421"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1440"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1440"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:61"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:149"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:213"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:269"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:324"
        },
        {
            "message": "Missing item type\n// resend if failed\nif (iceConnectionState === self.ICE_CONNECTION_STATE.FAILED) {\n  log.debug([targetMid, 'RTCIceConnectionState', null,\n    'Ice connection state failed. Re-negotiating connection']);\n  self._removePeer(targetMid);\n  self._sendChannelMessage({\n    type: self._SIG_MESSAGE_TYPE.WELCOME,\n    mid: self._user.sid,\n    rid: self._room.id,\n    agent: window.webrtcDetectedBrowser,\n    version: window.webrtcDetectedVersion,\n    userInfo: self.getPeerInfo(),\n    target: targetMid,\n    restartNego: true,\n    hsPriority: -1\n  });",
            "line": " source/peer-connection.js:400"
        },
        {
            "message": "Missing item type\nEvent fired when an ICE connection state has changed.",
            "line": " source/skylink-events.js:136"
        }
    ]
}